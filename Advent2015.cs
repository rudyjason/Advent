using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace test
{
	class Advent2015
	{
		const int NUMBERLIST_SIZE = 256;
		private string DAYTEN1RESULT;

		private readonly string input1 = "(((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()(((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()((((((((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())())(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()((()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())((()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(()()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()(()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))())))()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()())()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))()))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))()))))(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())()))))))))()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((())))(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(()(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((())))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))()))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()()))))))))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((()())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(())()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()())(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()())())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(()()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))(((()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()(())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((()((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((()((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()((((((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()())(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((()()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()(((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))(((()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()(((())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((()))((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))((((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((((()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((((((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()())(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()(((((()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()(())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((((())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))())((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((((())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()(";

		private readonly List<Size> input2 = new List<Size>()
		{
			{new Size(3, 11, 24)}, {new Size(13, 5, 19)}, {new Size(1, 9, 27)}, {new Size(24, 8, 21)}, {new Size(6, 8, 17)}, {new Size(19, 18, 22)}, {new Size(10, 9, 12)}, {new Size(12, 2, 5)}, {new Size(26, 6, 11)}, {new Size(9, 23, 15)}, {new Size(12, 8, 17)}, {new Size(13, 29, 10)}, {new Size(28, 18, 6)}, {new Size(22, 28, 26)}, {new Size(1, 5, 11)}, {new Size(29, 26, 12)}, {new Size(8, 28, 29)}, {new Size(27, 4, 21)}, {new Size(12, 7, 16)}, {new Size(7, 4, 23)}, {new Size(15, 24, 8)}, {new Size(15, 14, 2)}, {new Size(11, 6, 29)}, {new Size(28, 19, 9)}, {new Size(10, 3, 1)}, {new Size(5, 20, 13)}, {new Size(10, 25, 1)}, {new Size(22, 17, 7)}, {new Size(16, 29, 3)}, {new Size(18, 22, 8)}, {new Size(18, 11, 19)}, {new Size(21, 24, 20)}, {new Size(4, 7, 17)}, {new Size(22, 27, 12)}, {new Size(1, 26, 6)}, {new Size(5, 27, 24)}, {new Size(29, 21, 3)}, {new Size(25, 30, 2)}, {new Size(21, 26, 2)}, {new Size(10, 24, 27)}, {new Size(10, 16, 28)}, {new Size(18, 16, 23)}, {new Size(6, 5, 26)}, {new Size(19, 12, 20)}, {new Size(6, 24, 25)}, {new Size(11, 20, 7)}, {new Size(4, 8, 5)}, {new Size(2, 13, 11)}, {new Size(11, 17, 1)}, {new Size(13, 24, 6)}, {new Size(22, 29, 16)}, {new Size(4, 24, 20)}, {new Size(10, 25, 10)}, {new Size(12, 29, 23)}, {new Size(23, 27, 12)}, {new Size(11, 21, 9)}, {new Size(13, 2, 6)}, {new Size(15, 30, 2)}, {new Size(8, 26, 24)}, {new Size(24, 7, 30)}, {new Size(22, 22, 8)}, {new Size(29, 27, 8)}, {new Size(28, 23, 27)}, {new Size(13, 16, 14)}, {new Size(9, 28, 20)}, {new Size(21, 4, 30)}, {new Size(21, 20, 20)}, {new Size(11, 17, 30)}, {new Size(9, 14, 22)}, {new Size(20, 2, 6)}, {new Size(10, 11, 14)}, {new Size(1, 8, 23)}, {new Size(23, 19, 19)}, {new Size(26, 10, 13)}, {new Size(21, 12, 12)}, {new Size(25, 7, 24)}, {new Size(1, 28, 17)}, {new Size(20, 23, 9)}, {new Size(2, 24, 27)}, {new Size(20, 24, 29)}, {new Size(1, 3, 10)}, {new Size(5, 20, 14)}, {new Size(25, 21, 3)}, {new Size(15, 5, 22)}, {new Size(14, 17, 19)}, {new Size(27, 3, 18)}, {new Size(29, 23, 19)}, {new Size(14, 21, 19)}, {new Size(20, 8, 3)}, {new Size(22, 27, 12)}, {new Size(24, 15, 18)}, {new Size(9, 10, 19)}, {new Size(29, 25, 28)}, {new Size(14, 22, 6)}, {new Size(4, 19, 28)}, {new Size(4, 24, 14)}, {new Size(17, 19, 17)}, {new Size(7, 19, 29)}, {new Size(28, 8, 26)}, {new Size(7, 20, 16)}, {new Size(11, 26, 29)}, {new Size(2, 18, 3)}, {new Size(12, 7, 18)}, {new Size(11, 15, 21)}, {new Size(24, 7, 26)}, {new Size(2, 22, 23)}, {new Size(2, 30, 5)}, {new Size(1, 19, 8)}, {new Size(15, 29, 10)}, {new Size(15, 26, 22)}, {new Size(20, 16, 14)}, {new Size(25, 29, 22)}, {new Size(3, 13, 19)}, {new Size(1, 12, 30)}, {new Size(3, 15, 27)}, {new Size(19, 9, 11)}, {new Size(30, 8, 21)}, {new Size(26, 12, 20)}, {new Size(11, 17, 19)}, {new Size(17, 25, 1)}, {new Size(19, 24, 12)}, {new Size(30, 6, 20)}, {new Size(11, 19, 18)}, {new Size(18, 15, 29)}, {new Size(18, 8, 9)}, {new Size(25, 15, 5)}, {new Size(15, 6, 26)}, {new Size(13, 27, 19)}, {new Size(23, 24, 12)}, {new Size(3, 15, 28)}, {new Size(17, 10, 10)}, {new Size(15, 4, 7)}, {new Size(15, 27, 7)}, {new Size(21, 8, 11)}, {new Size(9, 18, 2)}, {new Size(7, 20, 20)}, {new Size(17, 23, 12)}, {new Size(2, 19, 1)}, {new Size(7, 26, 26)}, {new Size(13, 23, 8)}, {new Size(10, 3, 12)}, {new Size(11, 1, 9)}, {new Size(1, 11, 19)}, {new Size(25, 14, 26)}, {new Size(16, 10, 15)}, {new Size(7, 6, 11)}, {new Size(8, 1, 27)}, {new Size(20, 28, 17)}, {new Size(3, 25, 9)}, {new Size(30, 7, 5)}, {new Size(17, 17, 4)}, {new Size(23, 25, 27)}, {new Size(23, 8, 5)}, {new Size(13, 11, 1)}, {new Size(15, 10, 21)}, {new Size(22, 16, 1)}, {new Size(12, 15, 28)}, {new Size(27, 18, 26)}, {new Size(25, 18, 5)}, {new Size(21, 3, 27)}, {new Size(15, 25, 5)}, {new Size(29, 27, 19)}, {new Size(11, 10, 12)}, {new Size(22, 16, 21)}, {new Size(11, 8, 18)}, {new Size(6, 10, 23)}, {new Size(21, 21, 2)}, {new Size(13, 27, 28)}, {new Size(2, 5, 20)}, {new Size(23, 16, 20)}, {new Size(1, 21, 7)}, {new Size(22, 2, 13)}, {new Size(11, 10, 4)}, {new Size(7, 3, 4)}, {new Size(19, 2, 5)}, {new Size(21, 11, 1)}, {new Size(7, 27, 26)}, {new Size(12, 4, 23)}, {new Size(12, 3, 15)}, {new Size(25, 7, 4)}, {new Size(20, 7, 15)}, {new Size(16, 5, 11)}, {new Size(1, 18, 26)}, {new Size(11, 27, 10)}, {new Size(17, 6, 24)}, {new Size(19, 13, 16)}, {new Size(6, 3, 11)}, {new Size(4, 19, 18)}, {new Size(16, 15, 15)}, {new Size(1, 11, 17)}, {new Size(19, 11, 29)}, {new Size(18, 19, 1)}, {new Size(1, 25, 7)}, {new Size(8, 22, 14)}, {new Size(15, 6, 19)}, {new Size(5, 30, 18)}, {new Size(30, 24, 22)}, {new Size(11, 16, 2)}, {new Size(21, 29, 19)}, {new Size(20, 29, 11)}, {new Size(27, 1, 18)}, {new Size(20, 5, 30)}, {new Size(12, 4, 28)}, {new Size(3, 9, 30)}, {new Size(26, 20, 15)}, {new Size(18, 25, 18)}, {new Size(20, 28, 28)}, {new Size(21, 5, 3)}, {new Size(20, 21, 25)}, {new Size(19, 27, 22)}, {new Size(8, 27, 9)}, {new Size(1, 5, 15)}, {new Size(30, 6, 19)}, {new Size(16, 5, 15)}, {new Size(18, 30, 21)}, {new Size(4, 15, 8)}, {new Size(9, 3, 28)}, {new Size(18, 15, 27)}, {new Size(25, 11, 6)}, {new Size(17, 22, 15)}, {new Size(18, 12, 18)}, {new Size(14, 30, 30)}, {new Size(1, 7, 23)}, {new Size(27, 21, 12)}, {new Size(15, 7, 18)}, {new Size(16, 17, 24)}, {new Size(11, 12, 19)}, {new Size(18, 15, 21)}, {new Size(6, 18, 15)}, {new Size(2, 21, 4)}, {new Size(12, 9, 14)}, {new Size(19, 7, 25)}, {new Size(22, 3, 1)}, {new Size(29, 19, 7)}, {new Size(30, 25, 7)}, {new Size(6, 27, 27)}, {new Size(5, 13, 9)}, {new Size(21, 4, 18)}, {new Size(13, 1, 16)}, {new Size(11, 21, 25)}, {new Size(27, 20, 27)}, {new Size(14, 25, 9)}, {new Size(23, 11, 15)}, {new Size(22, 10, 26)}, {new Size(15, 16, 4)}, {new Size(14, 16, 21)}, {new Size(1, 1, 24)}, {new Size(17, 27, 3)}, {new Size(25, 28, 16)}, {new Size(12, 2, 29)}, {new Size(9, 19, 28)}, {new Size(12, 7, 17)}, {new Size(6, 9, 19)}, {new Size(15, 14, 24)}, {new Size(25, 21, 23)}, {new Size(26, 27, 25)}, {new Size(7, 18, 13)}, {new Size(15, 10, 6)}, {new Size(22, 28, 2)}, {new Size(15, 2, 14)}, {new Size(3, 24, 18)}, {new Size(30, 22, 7)}, {new Size(18, 27, 17)}, {new Size(29, 18, 7)}, {new Size(20, 2, 4)}, {new Size(4, 20, 26)}, {new Size(23, 30, 15)}, {new Size(5, 7, 3)}, {new Size(4, 24, 12)}, {new Size(24, 30, 20)}, {new Size(26, 18, 17)}, {new Size(6, 28, 3)}, {new Size(29, 19, 29)}, {new Size(14, 10, 4)}, {new Size(15, 5, 23)}, {new Size(12, 25, 4)}, {new Size(7, 15, 19)}, {new Size(26, 21, 19)}, {new Size(18, 2, 23)}, {new Size(19, 20, 3)}, {new Size(3, 13, 9)}, {new Size(29, 21, 24)}, {new Size(26, 13, 29)}, {new Size(30, 27, 4)}, {new Size(20, 10, 29)}, {new Size(21, 18, 8)}, {new Size(7, 26, 10)}, {new Size(29, 16, 21)}, {new Size(22, 5, 11)}, {new Size(17, 15, 2)}, {new Size(7, 29, 5)}, {new Size(6, 18, 15)}, {new Size(23, 6, 14)}, {new Size(10, 30, 14)}, {new Size(26, 6, 16)}, {new Size(24, 13, 25)}, {new Size(17, 29, 20)}, {new Size(4, 27, 19)}, {new Size(28, 12, 11)}, {new Size(23, 20, 3)}, {new Size(22, 6, 20)}, {new Size(29, 9, 19)}, {new Size(10, 16, 22)}, {new Size(30, 26, 4)}, {new Size(29, 26, 11)}, {new Size(2, 11, 15)}, {new Size(1, 3, 30)}, {new Size(30, 30, 29)}, {new Size(9, 1, 3)}, {new Size(30, 13, 16)}, {new Size(20, 4, 5)}, {new Size(23, 28, 11)}, {new Size(24, 27, 1)}, {new Size(4, 25, 10)}, {new Size(9, 3, 6)}, {new Size(14, 4, 15)}, {new Size(4, 5, 25)}, {new Size(27, 14, 13)}, {new Size(20, 30, 3)}, {new Size(28, 15, 25)}, {new Size(5, 19, 2)}, {new Size(10, 24, 29)}, {new Size(29, 30, 18)}, {new Size(30, 1, 25)}, {new Size(7, 7, 15)}, {new Size(1, 13, 16)}, {new Size(23, 18, 4)}, {new Size(1, 28, 8)}, {new Size(24, 11, 8)}, {new Size(22, 26, 19)}, {new Size(30, 30, 14)}, {new Size(2, 4, 13)}, {new Size(27, 20, 26)}, {new Size(16, 20, 17)}, {new Size(11, 12, 13)}, {new Size(28, 2, 17)}, {new Size(15, 26, 13)}, {new Size(29, 15, 25)}, {new Size(30, 27, 9)}, {new Size(2, 6, 25)}, {new Size(10, 26, 19)}, {new Size(16, 8, 23)}, {new Size(12, 17, 18)}, {new Size(26, 14, 22)}, {new Size(13, 17, 4)}, {new Size(27, 27, 29)}, {new Size(17, 13, 22)}, {new Size(9, 8, 3)}, {new Size(25, 15, 20)}, {new Size(14, 13, 16)}, {new Size(8, 7, 13)}, {new Size(12, 4, 21)}, {new Size(27, 16, 15)}, {new Size(6, 14, 5)}, {new Size(28, 29, 17)}, {new Size(23, 17, 25)}, {new Size(10, 27, 28)}, {new Size(1, 28, 21)}, {new Size(18, 2, 30)}, {new Size(25, 30, 16)}, {new Size(25, 21, 7)}, {new Size(2, 3, 4)}, {new Size(9, 6, 13)}, {new Size(19, 6, 10)}, {new Size(28, 17, 8)}, {new Size(13, 24, 28)}, {new Size(24, 12, 7)}, {new Size(5, 19, 5)}, {new Size(18, 10, 27)}, {new Size(16, 1, 6)}, {new Size(12, 14, 30)}, {new Size(1, 2, 28)}, {new Size(23, 21, 2)}, {new Size(13, 3, 23)}, {new Size(9, 22, 10)}, {new Size(10, 17, 2)}, {new Size(24, 20, 11)}, {new Size(30, 6, 14)}, {new Size(28, 1, 16)}, {new Size(24, 20, 1)}, {new Size(28, 7, 7)}, {new Size(1, 24, 21)}, {new Size(14, 9, 7)}, {new Size(22, 8, 15)}, {new Size(20, 1, 21)}, {new Size(6, 3, 7)}, {new Size(7, 26, 14)}, {new Size(5, 7, 28)}, {new Size(5, 4, 4)}, {new Size(15, 7, 28)}, {new Size(30, 16, 23)}, {new Size(7, 26, 2)}, {new Size(1, 2, 30)}, {new Size(24, 28, 20)}, {new Size(5, 17, 28)}, {new Size(4, 15, 20)}, {new Size(15, 26, 2)}, {new Size(1, 3, 23)}, {new Size(22, 30, 24)}, {new Size(9, 20, 16)}, {new Size(7, 15, 2)}, {new Size(6, 21, 18)}, {new Size(21, 21, 29)}, {new Size(29, 10, 10)}, {new Size(4, 3, 23)}, {new Size(23, 2, 18)}, {new Size(29, 24, 14)}, {new Size(29, 29, 16)}, {new Size(22, 28, 24)}, {new Size(21, 18, 24)}, {new Size(16, 21, 6)}, {new Size(3, 9, 22)}, {new Size(9, 18, 4)}, {new Size(22, 9, 9)}, {new Size(12, 9, 13)}, {new Size(18, 21, 14)}, {new Size(7, 8, 29)}, {new Size(28, 28, 14)}, {new Size(1, 6, 24)}, {new Size(11, 11, 3)}, {new Size(8, 28, 6)}, {new Size(11, 16, 10)}, {new Size(9, 16, 16)}, {new Size(6, 6, 19)}, {new Size(21, 5, 12)}, {new Size(15, 17, 12)}, {new Size(3, 6, 29)}, {new Size(19, 1, 26)}, {new Size(10, 30, 25)}, {new Size(24, 26, 21)}, {new Size(1, 10, 18)}, {new Size(6, 1, 16)}, {new Size(4, 17, 27)}, {new Size(17, 11, 27)}, {new Size(15, 15, 21)}, {new Size(14, 23, 1)}, {new Size(8, 9, 30)}, {new Size(22, 22, 25)}, {new Size(20, 27, 22)}, {new Size(12, 7, 9)}, {new Size(9, 26, 19)}, {new Size(26, 25, 12)}, {new Size(8, 8, 16)}, {new Size(28, 15, 10)}, {new Size(29, 18, 2)}, {new Size(25, 22, 6)}, {new Size(4, 6, 15)}, {new Size(12, 18, 4)}, {new Size(10, 3, 20)}, {new Size(17, 28, 17)}, {new Size(14, 25, 13)}, {new Size(14, 10, 3)}, {new Size(14, 5, 10)}, {new Size(7, 7, 22)}, {new Size(21, 2, 14)}, {new Size(1, 21, 5)}, {new Size(27, 29, 1)}, {new Size(6, 20, 4)}, {new Size(7, 19, 23)}, {new Size(28, 19, 27)}, {new Size(3, 9, 18)}, {new Size(13, 17, 17)}, {new Size(18, 8, 15)}, {new Size(26, 23, 17)}, {new Size(10, 10, 13)}, {new Size(11, 5, 21)}, {new Size(25, 15, 29)}, {new Size(6, 23, 24)}, {new Size(10, 7, 2)}, {new Size(19, 10, 30)}, {new Size(4, 3, 23)}, {new Size(22, 12, 6)}, {new Size(11, 17, 16)}, {new Size(6, 8, 12)}, {new Size(18, 20, 11)}, {new Size(6, 2, 2)}, {new Size(17, 4, 11)}, {new Size(20, 23, 22)}, {new Size(29, 23, 24)}, {new Size(25, 11, 21)}, {new Size(22, 11, 15)}, {new Size(29, 3, 9)}, {new Size(13, 30, 5)}, {new Size(17, 10, 12)}, {new Size(10, 30, 8)}, {new Size(21, 16, 17)}, {new Size(1, 5, 26)}, {new Size(22, 15, 16)}, {new Size(27, 7, 11)}, {new Size(16, 8, 18)}, {new Size(29, 9, 7)}, {new Size(25, 4, 17)}, {new Size(10, 21, 25)}, {new Size(2, 19, 21)}, {new Size(29, 11, 16)}, {new Size(18, 26, 21)}, {new Size(2, 8, 20)}, {new Size(17, 29, 27)}, {new Size(25, 27, 4)}, {new Size(14, 3, 14)}, {new Size(25, 29, 29)}, {new Size(26, 18, 11)}, {new Size(8, 24, 28)}, {new Size(7, 30, 24)}, {new Size(12, 30, 22)}, {new Size(29, 20, 6)}, {new Size(3, 17, 1)}, {new Size(6, 15, 14)}, {new Size(6, 22, 20)}, {new Size(13, 26, 26)}, {new Size(12, 2, 1)}, {new Size(7, 14, 12)}, {new Size(15, 16, 11)}, {new Size(3, 21, 4)}, {new Size(30, 17, 29)}, {new Size(9, 18, 27)}, {new Size(11, 28, 16)}, {new Size(22, 3, 25)}, {new Size(18, 15, 15)}, {new Size(2, 30, 12)}, {new Size(3, 27, 22)}, {new Size(10, 8, 8)}, {new Size(26, 16, 14)}, {new Size(15, 2, 29)}, {new Size(12, 10, 7)}, {new Size(21, 20, 15)}, {new Size(2, 15, 25)}, {new Size(4, 14, 13)}, {new Size(3, 15, 13)}, {new Size(29, 8, 3)}, {new Size(7, 7, 28)}, {new Size(15, 10, 24)}, {new Size(23, 15, 5)}, {new Size(5, 7, 14)}, {new Size(24, 1, 22)}, {new Size(1, 11, 13)}, {new Size(26, 4, 19)}, {new Size(19, 16, 26)}, {new Size(5, 25, 5)}, {new Size(17, 25, 14)}, {new Size(23, 7, 14)}, {new Size(24, 6, 17)}, {new Size(5, 13, 12)}, {new Size(20, 20, 5)}, {new Size(22, 29, 17)}, {new Size(11, 17, 29)}, {new Size(25, 6, 4)}, {new Size(29, 8, 16)}, {new Size(28, 22, 24)}, {new Size(24, 23, 17)}, {new Size(16, 17, 4)}, {new Size(17, 8, 25)}, {new Size(22, 9, 13)}, {new Size(24, 4, 8)}, {new Size(18, 10, 20)}, {new Size(21, 23, 21)}, {new Size(13, 14, 12)}, {new Size(23, 26, 4)}, {new Size(4, 10, 29)}, {new Size(2, 18, 18)}, {new Size(19, 5, 21)}, {new Size(2, 27, 23)}, {new Size(6, 29, 30)}, {new Size(21, 9, 20)}, {new Size(6, 5, 16)}, {new Size(25, 10, 27)}, {new Size(5, 29, 21)}, {new Size(24, 14, 19)}, {new Size(19, 11, 8)}, {new Size(2, 28, 6)}, {new Size(19, 25, 6)}, {new Size(27, 1, 11)}, {new Size(6, 8, 29)}, {new Size(18, 25, 30)}, {new Size(4, 27, 26)}, {new Size(8, 12, 1)}, {new Size(7, 17, 25)}, {new Size(7, 14, 27)}, {new Size(12, 9, 5)}, {new Size(14, 29, 13)}, {new Size(18, 17, 5)}, {new Size(23, 1, 3)}, {new Size(28, 5, 13)}, {new Size(3, 2, 26)}, {new Size(3, 7, 11)}, {new Size(1, 8, 7)}, {new Size(12, 5, 4)}, {new Size(2, 30, 21)}, {new Size(16, 30, 11)}, {new Size(3, 26, 4)}, {new Size(16, 9, 4)}, {new Size(11, 9, 22)}, {new Size(23, 5, 6)}, {new Size(13, 20, 3)}, {new Size(4, 3, 2)}, {new Size(14, 10, 29)}, {new Size(11, 8, 12)}, {new Size(26, 15, 16)}, {new Size(7, 17, 29)}, {new Size(18, 19, 18)}, {new Size(8, 28, 4)}, {new Size(22, 6, 13)}, {new Size(9, 23, 7)}, {new Size(11, 23, 20)}, {new Size(13, 11, 26)}, {new Size(15, 30, 13)}, {new Size(1, 5, 8)}, {new Size(5, 10, 24)}, {new Size(22, 25, 17)}, {new Size(27, 20, 25)}, {new Size(30, 10, 21)}, {new Size(16, 28, 24)}, {new Size(20, 12, 8)}, {new Size(17, 25, 1)}, {new Size(30, 14, 9)}, {new Size(14, 18, 6)}, {new Size(8, 28, 29)}, {new Size(12, 18, 29)}, {new Size(9, 7, 18)}, {new Size(6, 12, 25)}, {new Size(20, 13, 24)}, {new Size(22, 3, 12)}, {new Size(5, 23, 22)}, {new Size(8, 10, 17)}, {new Size(7, 23, 5)}, {new Size(10, 26, 27)}, {new Size(14, 26, 19)}, {new Size(10, 18, 24)}, {new Size(8, 4, 4)}, {new Size(16, 15, 11)}, {new Size(3, 14, 9)}, {new Size(18, 5, 30)}, {new Size(29, 12, 26)}, {new Size(16, 13, 12)}, {new Size(15, 10, 7)}, {new Size(18, 5, 26)}, {new Size(14, 1, 6)}, {new Size(10, 8, 29)}, {new Size(3, 4, 9)}, {new Size(19, 4, 23)}, {new Size(28, 17, 23)}, {new Size(30, 7, 17)}, {new Size(19, 5, 9)}, {new Size(26, 29, 28)}, {new Size(22, 13, 17)}, {new Size(28, 2, 1)}, {new Size(20, 30, 8)}, {new Size(15, 13, 21)}, {new Size(25, 23, 19)}, {new Size(27, 23, 1)}, {new Size(4, 6, 23)}, {new Size(29, 29, 24)}, {new Size(5, 18, 7)}, {new Size(4, 6, 30)}, {new Size(17, 15, 2)}, {new Size(27, 4, 2)}, {new Size(25, 24, 14)}, {new Size(28, 8, 30)}, {new Size(24, 29, 5)}, {new Size(14, 30, 14)}, {new Size(10, 18, 19)}, {new Size(15, 26, 22)}, {new Size(24, 19, 21)}, {new Size(29, 23, 27)}, {new Size(21, 10, 16)}, {new Size(7, 4, 29)}, {new Size(14, 21, 3)}, {new Size(21, 4, 28)}, {new Size(17, 16, 15)}, {new Size(24, 7, 13)}, {new Size(21, 24, 15)}, {new Size(25, 11, 16)}, {new Size(10, 26, 13)}, {new Size(23, 20, 14)}, {new Size(20, 29, 27)}, {new Size(14, 24, 14)}, {new Size(14, 23, 12)}, {new Size(18, 6, 5)}, {new Size(3, 18, 9)}, {new Size(8, 18, 19)}, {new Size(20, 26, 15)}, {new Size(16, 14, 13)}, {new Size(30, 16, 3)}, {new Size(17, 13, 4)}, {new Size(15, 19, 30)}, {new Size(20, 3, 8)}, {new Size(13, 4, 5)}, {new Size(12, 10, 15)}, {new Size(8, 23, 26)}, {new Size(16, 8, 15)}, {new Size(22, 8, 11)}, {new Size(12, 11, 18)}, {new Size(28, 3, 30)}, {new Size(15, 8, 4)}, {new Size(13, 22, 13)}, {new Size(21, 26, 21)}, {new Size(29, 1, 15)}, {new Size(28, 9, 5)}, {new Size(27, 3, 26)}, {new Size(22, 19, 30)}, {new Size(4, 11, 22)}, {new Size(21, 27, 20)}, {new Size(22, 26, 7)}, {new Size(19, 28, 20)}, {new Size(24, 23, 16)}, {new Size(26, 12, 9)}, {new Size(13, 22, 9)}, {new Size(5, 6, 23)}, {new Size(20, 7, 2)}, {new Size(18, 26, 30)}, {new Size(3, 6, 28)}, {new Size(24, 18, 13)}, {new Size(28, 19, 16)}, {new Size(25, 21, 25)}, {new Size(25, 19, 23)}, {new Size(22, 29, 10)}, {new Size(29, 19, 30)}, {new Size(4, 7, 27)}, {new Size(5, 12, 28)}, {new Size(8, 26, 6)}, {new Size(14, 14, 25)}, {new Size(17, 17, 2)}, {new Size(5, 27, 11)}, {new Size(8, 2, 2)}, {new Size(3, 20, 24)}, {new Size(26, 10, 9)}, {new Size(22, 28, 27)}, {new Size(18, 15, 20)}, {new Size(12, 11, 1)}, {new Size(5, 14, 30)}, {new Size(7, 3, 16)}, {new Size(2, 16, 16)}, {new Size(18, 20, 15)}, {new Size(13, 14, 29)}, {new Size(1, 17, 12)}, {new Size(13, 5, 23)}, {new Size(19, 4, 10)}, {new Size(25, 19, 11)}, {new Size(15, 17, 14)}, {new Size(1, 28, 27)}, {new Size(11, 9, 28)}, {new Size(9, 10, 18)}, {new Size(30, 11, 22)}, {new Size(21, 21, 20)}, {new Size(2, 1, 5)}, {new Size(2, 25, 1)}, {new Size(7, 3, 4)}, {new Size(22, 15, 29)}, {new Size(21, 28, 15)}, {new Size(12, 12, 4)}, {new Size(21, 30, 6)}, {new Size(15, 10, 7)}, {new Size(10, 14, 6)}, {new Size(21, 26, 18)}, {new Size(14, 25, 6)}, {new Size(9, 7, 11)}, {new Size(22, 3, 1)}, {new Size(1, 16, 27)}, {new Size(1, 14, 23)}, {new Size(2, 13, 8)}, {new Size(14, 19, 11)}, {new Size(21, 26, 1)}, {new Size(4, 28, 13)}, {new Size(12, 16, 20)}, {new Size(21, 13, 9)}, {new Size(3, 4, 13)}, {new Size(14, 9, 8)}, {new Size(21, 21, 12)}, {new Size(27, 10, 17)}, {new Size(6, 20, 6)}, {new Size(28, 23, 23)}, {new Size(2, 28, 12)}, {new Size(8, 10, 10)}, {new Size(3, 9, 2)}, {new Size(20, 3, 29)}, {new Size(19, 4, 16)}, {new Size(29, 24, 9)}, {new Size(26, 20, 8)}, {new Size(15, 28, 26)}, {new Size(18, 17, 10)}, {new Size(7, 22, 10)}, {new Size(20, 15, 9)}, {new Size(6, 10, 8)}, {new Size(7, 26, 21)}, {new Size(8, 8, 16)}, {new Size(15, 6, 29)}, {new Size(22, 30, 11)}, {new Size(18, 25, 8)}, {new Size(6, 21, 20)}, {new Size(7, 23, 25)}, {new Size(8, 25, 26)}, {new Size(11, 25, 27)}, {new Size(22, 18, 23)}, {new Size(3, 2, 14)}, {new Size(16, 16, 1)}, {new Size(15, 13, 11)}, {new Size(3, 9, 25)}, {new Size(29, 25, 24)}, {new Size(9, 15, 1)}, {new Size(12, 4, 1)}, {new Size(23, 30, 20)}, {new Size(3, 1, 23)}, {new Size(6, 10, 29)}, {new Size(28, 13, 24)}, {new Size(4, 19, 17)}, {new Size(6, 6, 25)}, {new Size(27, 29, 17)}, {new Size(12, 13, 2)}, {new Size(10, 7, 13)}, {new Size(14, 15, 8)}, {new Size(22, 2, 3)}, {new Size(27, 17, 19)}, {new Size(23, 10, 16)}, {new Size(5, 9, 25)}, {new Size(9, 25, 14)}, {new Size(11, 18, 6)}, {new Size(18, 10, 12)}, {new Size(9, 4, 15)}, {new Size(7, 16, 14)}, {new Size(17, 24, 10)}, {new Size(11, 4, 6)}, {new Size(12, 9, 17)}, {new Size(22, 18, 12)}, {new Size(6, 24, 24)}, {new Size(6, 22, 23)}, {new Size(5, 17, 30)}, {new Size(6, 9, 5)}, {new Size(17, 20, 10)}, {new Size(6, 8, 12)}, {new Size(14, 17, 13)}, {new Size(29, 10, 17)}, {new Size(22, 4, 5)}, {new Size(10, 19, 30)}, {new Size(22, 29, 11)}, {new Size(10, 12, 29)}, {new Size(21, 22, 26)}, {new Size(16, 6, 25)}, {new Size(1, 26, 24)}, {new Size(30, 17, 16)}, {new Size(27, 28, 5)}, {new Size(30, 13, 22)}, {new Size(7, 26, 12)}, {new Size(11, 24, 30)}, {new Size(1, 17, 25)}, {new Size(22, 1, 3)}, {new Size(29, 24, 6)}, {new Size(4, 8, 24)}, {new Size(13, 9, 20)}, {new Size(8, 12, 9)}, {new Size(21, 25, 4)}, {new Size(23, 23, 28)}, {new Size(5, 2, 19)}, {new Size(29, 3, 15)}, {new Size(22, 1, 14)}, {new Size(3, 23, 30)}, {new Size(8, 25, 3)}, {new Size(15, 8, 14)}, {new Size(30, 14, 6)}, {new Size(23, 27, 24)}, {new Size(19, 1, 2)}, {new Size(10, 9, 13)}, {new Size(13, 8, 7)}, {new Size(8, 13, 22)}, {new Size(5, 15, 20)}, {new Size(17, 14, 8)}, {new Size(5, 11, 20)}, {new Size(5, 10, 27)}, {new Size(24, 17, 19)}, {new Size(21, 2, 3)}, {new Size(15, 30, 26)}, {new Size(21, 19, 15)}, {new Size(2, 7, 23)}, {new Size(13, 17, 25)}, {new Size(30, 15, 19)}, {new Size(26, 4, 10)}, {new Size(2, 25, 8)}, {new Size(9, 9, 10)}, {new Size(2, 25, 8)}, {new Size(19, 21, 30)}, {new Size(17, 26, 12)}, {new Size(7, 5, 10)}, {new Size(2, 22, 14)}, {new Size(10, 17, 30)}, {new Size(1, 8, 5)}, {new Size(23, 2, 25)}, {new Size(22, 29, 8)}, {new Size(13, 26, 1)}, {new Size(26, 3, 30)}, {new Size(25, 17, 8)}, {new Size(25, 18, 26)}, {new Size(26, 19, 15)}, {new Size(8, 28, 10)}, {new Size(12, 16, 29)}, {new Size(30, 6, 29)}, {new Size(28, 19, 4)}, {new Size(27, 26, 18)}, {new Size(15, 23, 17)}, {new Size(5, 21, 30)}, {new Size(8, 11, 13)}, {new Size(2, 26, 7)}, {new Size(19, 9, 24)}, {new Size(3, 22, 23)}, {new Size(6, 7, 18)}, {new Size(4, 26, 30)}, {new Size(13, 25, 20)}, {new Size(17, 3, 15)}, {new Size(8, 20, 18)}, {new Size(23, 18, 23)}, {new Size(28, 23, 9)}, {new Size(16, 3, 4)}, {new Size(1, 29, 14)}, {new Size(20, 26, 22)}, {new Size(3, 2, 22)}, {new Size(23, 8, 17)}, {new Size(19, 5, 17)}, {new Size(21, 18, 20)}, {new Size(17, 21, 8)}, {new Size(30, 28, 1)}, {new Size(29, 19, 23)}, {new Size(12, 12, 11)}, {new Size(24, 18, 7)}, {new Size(21, 18, 14)}, {new Size(14, 26, 25)}, {new Size(9, 11, 3)}, {new Size(10, 7, 15)}, {new Size(27, 6, 28)}, {new Size(14, 26, 4)}, {new Size(28, 4, 1)}, {new Size(22, 25, 29)}, {new Size(6, 26, 6)}, {new Size(1, 3, 13)}, {new Size(26, 22, 12)}, {new Size(6, 21, 26)}, {new Size(23, 4, 27)}, {new Size(26, 13, 24)}, {new Size(5, 24, 28)}, {new Size(22, 16, 7)}, {new Size(3, 27, 24)}, {new Size(19, 28, 2)}, {new Size(11, 13, 9)}, {new Size(29, 16, 22)}, {new Size(30, 10, 24)}, {new Size(14, 14, 22)}, {new Size(22, 23, 16)}, {new Size(14, 8, 3)}, {new Size(20, 5, 14)}, {new Size(28, 6, 13)}, {new Size(3, 15, 25)}, {new Size(4, 12, 22)}, {new Size(15, 12, 25)}, {new Size(10, 11, 24)}, {new Size(7, 7, 6)}, {new Size(8, 11, 9)}, {new Size(21, 10, 29)}, {new Size(23, 28, 30)}, {new Size(8, 29, 26)}, {new Size(16, 27, 11)}, {new Size(1, 10, 2)}, {new Size(24, 20, 16)}, {new Size(7, 12, 28)}, {new Size(28, 8, 20)}, {new Size(14, 10, 30)}, {new Size(1, 19, 6)}, {new Size(4, 12, 20)}, {new Size(18, 2, 7)}, {new Size(24, 18, 17)}, {new Size(16, 11, 10)}, {new Size(1, 12, 22)}, {new Size(30, 16, 28)}, {new Size(18, 12, 11)}, {new Size(28, 9, 8)}, {new Size(23, 6, 17)}, {new Size(10, 3, 11)}, {new Size(5, 12, 8)}, {new Size(22, 2, 23)}, {new Size(9, 19, 14)}, {new Size(15, 28, 13)}, {new Size(27, 20, 23)}, {new Size(19, 16, 12)}, {new Size(19, 30, 15)}, {new Size(8, 17, 4)}, {new Size(10, 22, 18)}, {new Size(13, 22, 4)}, {new Size(3, 12, 19)}, {new Size(22, 16, 23)}, {new Size(11, 8, 19)}, {new Size(8, 11, 6)}, {new Size(7, 14, 7)}, {new Size(29, 17, 29)}, {new Size(21, 8, 12)}, {new Size(21, 9, 11)}, {new Size(20, 1, 27)}, {new Size(1, 22, 11)}, {new Size(5, 28, 4)}, {new Size(26, 7, 26)}, {new Size(30, 12, 18)}, {new Size(29, 11, 20)}, {new Size(3, 12, 15)}, {new Size(24, 25, 17)}, {new Size(14, 6, 11)}
		};

		private readonly string input3 = "v>v<vvv<<vv^v<v>vv>v<<<^^^^^<<^<vv>^>v^>^>^>^>^><vvvv<^>^<<^><<<^vvvv>^>^><^v^><^<>^^>^vvv^<vv>>^>^^<>><>^>vvv>>^vv>^<><>^<v^>^>^><vv^vv^>><<^><<v>><>^<^>>vvv>v>>>v<<^<><^<v<>v>^^v^^^<^v^^>>><^>^>v<>^<>>^>^^v^><v<v>>><>v<v^v>^v<>>^><v>^<>v^>^<>^v^^^v^^>>vv<<^^><^<vvv>^>^^<^>>^^^^^v^<v>vv<>>v^v<^v^^<><^<^vv^><>><><>v>vvv^vv^^<<><<vvv><<^v^><v<>vvv^<^>vvvv^>^>>^v^<v^vv<^^v<>v>vv^<>><v<<<^v^<<><v<^<^<><^^^>^>>v>^>v^<>v><^<^<v^>^^vv<^^<>v^v^vv<>>>>v^v<>><^^v>vv^^>v^v>v<vv>>v>><v^v^v>vv>^^>^v><<vv^v^^vv<^v><^<<v<v^>vv^^^<v^>v>v^^^>><^^<v^<^>>v><vv<v^^>^^v>>v^^^<^^v>^v>><^<^<>>v<<^^vv>^^^v<^<^<v<v^^vv>^vv^>>v^><v>><<<>^vv^<^<>v^^<<<v<^>^><><v^^>>^^^<^vv<^^^>><^^v>^^v^<v^v^>^^<v>^<^v<^<<<<^<v^>v^<^^<>^^>^><<>>^v><>><^<v><^^^>>vv>^><vv>^^^^^v^vvv><><^<^>v>v^v^>^><><^<^><>v<<vv<^>><>^v^^v>^<<<>^v^>^<<v^vv<>v^<v^^vv><<v^<>>>^<v>vv>v>>>^<^>><vv<>>>>v<v>>>^v>v><>>vvv<^^><<^>^>v<^vvvv<v><vv<><^^^v^^^>v^v<>v<^^v>>><>v<v^>>v><v^>>^^<v<<<^<v<><^^v><<v^><<<<^vv<^<>^><vv<<<<^>>>^v>^v>vv>^v<>v>v<v><^>>v>>^>^><^<v^v^>^v<><><^^>^<vvvv^^<>^^^>vv^v^v>^v^^v^^v><v^<^<>><^<v>v>>vv<<v>>vvvv<vv><>>^v^>^>>v^v^<<<vv<><v<<>>>^v<<v>^^vv^><>v>^>v><<<<<<<^>^^v^<<^^>>vvv^<><>><>^^v<<vv><^^v<^^><vv>v^>>>v^v><v^v<^>v^><>v<<>v>^^v><<<<><^v^v>>^<>^<<>^<v<<>>v<<>><^<<<<^v>^<^v>v>vv<v<v<<>^>v<^<<>v^<vvvv^>v>><<v><v<>v>v>>v^vvv^^>>>v^<^<<^^<<<><v>v^<<v<<<>v<^^<><v<v^^<v>^>v>>v<>^>^^>>^v<<>v^^^>>>^vv<^v<v>^>v>^><>v^^<>^^v^^vv^<^>^<<>><<^>^v>>><<<vvvv><<><v<^v^v<vvv^<><<^<vv><v^v^v^>v>v^<vvv^><^><^<vv><>>v^>^^^<>><v^<^^^<>v<<v<^v>>>^>>v^><<>vvv><^>>v><v><>v>>^>v><<><<>^<>^^^vv><v^>v^^>>^>^<^v<v<^^<^vvvv>v<v>^>v^>^><^<vvvv><^><><<v<>v<v^><^<v^>^v^^<<<<^><^^<^><>>^v<<^<<^vv>v>>v<^<^vv>><v<vv>v<v<v>^v<>^>v<>^v<<<v>>^^v>>><vvv>v^>^v^v>^^^v<vvvv>><^>vvv^<vv^^vv><<<>v<>v>^<vvv^<^<v<v<^vv^^>>vv^<^^v^><^^^^^v<^<v<^>>>vv^v^>^<v>^<><v^<^v>>><^v^<<v<<v<>v>^v<v^v>>^^v<<v<v<<>>>vv>>^v>>^<<<<^><<<><^^>>v<>^vvvv>v^^^>^^^>^<vvvv><^^v<v<>v<^v^v<<v^^^v^<v<^v>v^^<>^>^<^v>vv<v^vv<^<<>v><<^><><^^v<<><^^><>^v>^<><<^<^^<<>vv<>^^<<^>><<<>>vvv>^>v^^v^><<^>v>^>^<^<<>v<^>vv^v^v<>vv<<v>vv<vv><^>v^<>^vv^v^<v<^>>>>v^v><^<><<>vv^<vvv^>>vvv^>v>>><^^vv<vvvv>v<^<^>>^^>^^vv>>><^v<>^v^<<>v^^^<v>^>>^<^<v>>^v<^^^<v>^v>^>>v<vv>>^<v^<<>>^>>><v>v^<<^<v>>^<<^^<>v<^v<^<>v^v>^^v<vvvv>^vv>vvv>v^<^>><v^^vv<<<^>vvvv<>>^^<>v^<><>v<^<>v<>^>v<>vv<v^v>>v<v<^<v^^v^vv^vvv><^^>v>><>>^<^^<>>^>^<v^>>vvv^v><v>>^>^>v><><<><vv^v>v<>^v<^vv^^^<>^^<<^^^v<>><v<^<^<^<^^><v^v<^>v^>vvvv>^^v^>^<v<^^^>>^<<vv^<><><^^^^<<>^<><v>vv^<><^>^^<>v^<>>>v><>vvvvv>v>v^^>^<<vvvv<>vv>>v<<^<>^^^v^<><>>^<<<v<v<>>>><><v>v<v<>>^>^^^^vv^^<<><^^<<vv<^<>v>vv<v<><<<^<<v<<<<>v<>>^<^>^>><v>v>><^^<>><<<><<><v^^v<<><^<^v<v^><^^v<<>><<<<^>v^<v>><v^><v<vvv>v^v^<v><<>>v<><<v>^<>><>>^><>v^v>v<<>v<>v^^><<>>>v<<>>>>^>v>><v<<>>>vv>v>^<^^^<>v<v>^<^^v^vvv^>vv>^<v><vvvv>^<<>vvv<<<vv>^^<^>^>>v>v<<<<<>^^vv^>>v>^<^<v^v^>^v>>v>^v<><>^<^>v>v<<<^^^v>^<<<>vvv^v^^>^>>^>v>v<>^^><>>v>^>v<<<^^^v^<v^vv>><><^<^<><vvv<v^>>^v>vv<^v<<^vv>v^<<v>v>v>^v^>^v<<^v^vv>v<v>^<<><v^>>v<>><v<<<^v<<>vvv^<vv<vvv<<>^vv^^v><^>v^vv<<v^<<^^^<^<>^^<<>v<><<v>^><>^<><<v<v^^>vv<>^<v<^<vvv>vv>v><^^v<>><^v^v><><>><v<v>vv<>>><v^^v<>><<^>>><^^^vvv<<<vv<<^v<<<>><<vv>>>>v<<<<<vv><><v>v^^<<^vv^<vv<>>vv>^<>^v^^<>^^^vv>v^^<v<><v>v<v>>^v<v<>>^<v^^><>v^^^>v^^v<vv><^>v^v^<>v>v<v<^^>>v<^^vv^v<^^^^vv<<><<^>>^^<<v^^<<^>v^>>^^^><^^>^v^v>^<<v<vv<<<v<^^^>^>>^v<>^<^>v>^>^v^<^^^<^vv<v><^^>>v<v>^>^v^>>>>^v>^^<<^<v^v<^<<v<<^><^^<v^<><v>v^<<v^^<><<>>><vv<<><>^<>>>v<<v^^^v^^<<<vv<<^<^<^vv^<><><<^^<^^>v^>^<v<>>v^v<><<v>^^v>^<^<vvv<v>v^v>>>^^<^<v^>^vv<<<v<<>^><><^<>v>>>v<v^<>v>><^^^v^^^v<^^<vv^^^>v>v<>>^^<><>v>^<v<>^>>>><>v>^v>^vv^v<vv<<^^>><v<>^>^^<v<^>^<vvv>><>^<<>>><<<><>^^<<<v<>v^>v>v<v>^^^>^>^v<<>v>vv>><<<v>^^<v><vv<<v^^>^>>^><^>v<^<^v>><^^>v<vv^^><><>^><<><>v^>v<><^^>><>^<^^v<^<<v>><v><<<^^<<v<^vv^v<>><>>>^>v<vvv^>^<><v^><^<<^vv<^v^v^v<>v^^v>v^<^>^vv^>>><<>v^vv^<>^v^><<v^v<v>v^<><>>v^v^><>v^vvv^^^<<^<<v<<v<^vv^>>v^v>^^<v<>><>v>>v^<>^>v>^>><<>v^v><^v>v>>><v<v><^<^^>vv<v><^>^<^>^^v><><v<^^v<<><^<<v^<v<<><^^vvv^v>^>^<>>vv>v^^v^^vv<^^>><v^^vv><^v>v^<<v<^v>vvv<>>^v><<>^v<<<>^><^vv><<^^<v^>v<<v>^vv<>^v>>>><<<<^^<^v>^<^^<^<^^>>^^v>^^^^v^^^<<>^^vv<<v^^><v>><^<<><>^>v<>>v^^^>^v^^v^<v^v>v>>>>>^v>^>^^<vvv^^<v^<<<v<<>v>><^^^v<<^^<v>>^<^<^><^<<v^v><<vv<^<>>v>v>^v<><<v>^>vv^v<v>v><^<v>><>^<vv<v^^^^v<^^>><<^^>v>v>^^^<>v>^v^^>vv^vv<^^>><>^>^<>v>><>^v<<v>v>^><^^^v^<vv><<^v^>v^>vv>v^<>v><vv><^v>v<><v^v^v<^v<>^v<v^<<><<v>>^v><v>^^<>vvv^>^<<v^>><^>><^<>^v<v<v<^vvv<><<^v^<v>><<<v>^<^<v>v>^vv^v>v<^^vv<<vvv^<v>><>vv^>v<<>v<vvvv>>v>^^>>><<<^>^vv>><v>^^^>v<^vv<>v<<<v<<<<v>>>>^<^^^^>v<^^<><v>v>v<v^>vv^>v>v<^>^v^<>v>>vvv>^^><^vvv>><>>>^<<^<v<>>>v^^><v<v>>^><>v<^^v^<<v><>^<>>><^v^v>>>^vvvv^<><<<v<^>>v>^v^<v<v<<^<<v^vv^v>v<v<>>v<v^<<<><v^>><^<<^>^^><v>v<^v^<^>v>^<<v>v^<>v^<>vv^<>^>^>v^>^vv<>^^<<>>v<>^v<><v^><><<<vv>v>v^>vv^><<<<v>^v<><>^^<vv>v^^v^^^<v<^^><v^v<>><v<vv>^<>>><vv<^v<<>>^><>>v<v^v^>>>v<<>v<<<<<<<^v<<^^^v<^v<>v^^<<<^<>>v^vv<v>^<^^<^^<<^>vv><^<^^v<<<^><^v<^><>v<vv^>^v^^>>><<vv^^v><^<<^<>>^>>^<<<<v^vv<>>>v>^v>><>v>>v>><>v>><^^><v>^^vv<^^<^>vv><<^>><<><v>^vvv><^v^>vvv^>>^<><^>^<<>>v^v>v<<>^>>^>v<^^<^<<>^^v<vvvvv^^^<^<>^^v>v<>^<^^<<v>v^^vvv^^v>^vv<v^>^<>v<^v^>^<v><v<<<^v<v<v^^<vvv>vv<<vv>v^<<v<^<vv><^>^><^^<^^<<v^^<v^v<v^^^^>^>vv^<>^<>^>^^<^v><<<^>vv^vv>v^v<>^^v^<^^^vvv^><v^<v^^<v<>v^<><>v>vv<^v^>>^v<^^vv>vv>^>><<<<v^^<^><>^><>>v<>>v>^v<^vv>^^>^<^<<v^>>v^v<^^v<vv<^<><^^>^^<>^^^<vv<v<<^^>^>^vv<^>><^<vvv^<>>vv^><v>v^>^vv>^>v^^<>>^v<>>v<^>^v>vv^<vv<^^>>^<v>>>>vvv>vv>^><^v<<<>^^v>v^v<^^^v^^>^><<^^>^<v>><^^^^^<v<vv<v<^<>^^<^v<^>>vv>>^v^vv<>><>^>>>^<v>^^^^><^<<<v<>^v<><vvv^<^^>vv^>>v<vvvv><v^v><^vv<^v<><vvv<vv>v<>^v^<<>>>>v^^>^vv<<vvv<^^><v><><<>v^v<^<^>><vv>^^><^>^><<><v<^v^><^<><>vv>>>>^><<^^^<^v^>^>^^>^<^><v><^^<^^<>><><v>><<<>^>^^v<>^<<<v>>vv>^>>^>^<>>vv<^^vv<>v<>^^>^v<v^^^^v<>^<v>v^v>^^^<v>v<<<^vv^><>^<v>>^^vv>v^<<^><>>vv^^^^^>v>>v<<<>^<vvv<<><><^v<^v<^>^<>^vvv>^>v><<<vv<>v>vv<v<<v>^<^^>v^v>^<^v^<<vvv^^<>^v<<^>^<><>^^<>>^^<^v^<^<v<><<^><v<>v^^>v^v^^^<^v<<^v>^>>^^^^^><<<vv^>>v^><v^^vv><>v^^<^v<^<v^^><<v>v^^^><^^^><<<<<>^<<^<>>v<<v^v^^v<<>^<vv>>><^^^<>>>>vvv>v<>>>v^v^v<^<<^>^<<>v>>^>^^><^><<^v^^<^<>v^v>vv<>>>>>>v<<><v^<v<>>^^>v<<<>^<<v><^><<^v>vv>>>><><>v^<^v><v^<<<<^v><^>v>>^^^v<^>>^>>v<<^<<>vvv>>^v<>>^v><<<^v^v<><v>^vvv<v<v>^^^<><vv^<<>vvv<v<^^v^^><v<^v<^v^<v<^>^^^>>v>^<v^>>^<><<><vv<>vv>^v^>>^<<v<^^v>v<v<vvv>><><<><vvvvv<^v<^>^^><>^<<>^v<<>>v^vv<<>^^v^v^v><^>v>v<^<<^<^>vv>^v<<^>^>>v^<<v^>v^^v^^<v^v>>><vv><<<>^v>><><v<vv<^>v<>><^v>^^v<<<<^v^vv<<<<><><^<^<^v><<^^v^<<<<<^^><^^>vv<v<^<v>v<^><><v<>vvv^<vv>v^>^>^^^v<<^<^^>vv<v^v^v>^vv^><^v^<<>v<^^>^vv<<>^<<><^>v^<<^<>v><><>v<<^^><^^^v>>v>^vv<v^>>^v^^<><<<<<^>^v^<^<^^>^vv<^>v^^v^<>v<><v>v^v>vvv><><<><>vv<vvv^v>^^>^^^<><^>^^^>v<vvvv<>vv<v<v^^>><>v<>>v^>v^^vv^>v>>><v<<<<v<^v>><^^>^v^v<v^v^^^vvv>>>vv<^>><<<^>><^<^>^<^>^>>v^<^<>^<^^<><vvv^^<>^<>>><<v>^<^<v<<><^<<^><^^>vv<>^^><v^v<vv<^<vvv<<^>v^>>v>>>v<<^vv^<><>>>^^<^v^>>^>>><<v<<^<vv><^<>^>>^v>>><^^^<<<vv<<v<v>^vv><><<>^^^<>^<vv^<^<<v>^^><vv>><>>>^>vv>^<^<>>^<^^><v>v^><v>vv><><>>><><<^^v<<^v<v>vv<><><<^v>^v<>^<^^^v^>^<^><^v>v>^v<>><^^v^^^^^<><v<>>vvv<v^^<>v>>>>^<<><^v>vv>>^^><<><><^^^<^<^<<^v>^^^><v>>>>><<v<v>v^^^<>>v<vv<^<>v^^^v<><^>v>><<><>v<^><<>>><>v>^<>>^>v^v<<<<>^<v^vv^>vv<<><v^vv<v<v<<>>>>>vv<><>^<^v>vv^<<v<^v^^<<^<<^^v^>>><<>^<>><^>>><v<>><<>^^>><<<^^^^^v>>^<<>>vvvv<^v<v^^<^>^vv<vv<>v<<<^><>>>>vv^<^v>v<^<>^v>>^<^^v^>>><>^^<^v>>v<<>vv<vvvv<>vv>^><>v^<>^<<^vv<v^^v<vvvv><^>>^v^>^^<<<^>>^^>^<^^<^<<<v^<^^v<<vv^<<^^^vv><v<vv^>v^^v<v>^^<^v<^>>><<>vv<<^><<v^v^^^v<vv>^>vv<^>>^<v<>vv>>>^>>><<v<^<>^<<<>>^<<>><^<<^^^>>v^^>v<<<>v>v>v<v<^>^<>>>^vvv><<^^<<><v<><^<v<vvv>v>>>>vv^^v<v<^<^><v>^v<<v<vv>>v>v<<<<><<>vv<><^^^<>>v<v<vvv><v^<vv^>>><v^^<>>>^^<><^<^v^><vv>>^^v>^<<v^>v>^^>^v^<v<^<v^v><>>v^^<^v^^<<>^^>v^^>><<<<^<^^v>^^v>v<<vv^^vv>^>v^<v<v><>vv>>^<v^v^<v<^>^v>v^^>vvvvv<v><<>vv>vvvvvv>>v>>^^^<v>vv^^><<v>>v^^^^v>vv>v<^v>>>>^>^><v^>^<v<vv>v>^>><v>><<>>^vv<vv^^<^^>>>>><><<^<v<><<v>^><^vv^v>>>>>v>^>^<vv>^v^>v<^v^<^<<vv<<>v<>>^vv<<>^v^v>><><<>>v^^<<>^^<v><>v<<^^<^^>^^>^<^><>>v<>>^^<^>><<<v<>>>^v^>v>v<<^^<<^>v<v^>>v^^v^^<<>^v>v><v^>v<^^>^<vv><vv^<>v<><^<<<vv<<v>v<^<<<<^^>v^v^^><<><^^^<v>v^^>>>vvv><>vv<>>^^v^v<<^>v^^v^>vv>^<<v<^<v^>^^<<v<^^>^v^^<^^v<<>>vv<^>>^><><>v>>v<>^<v^^><<>>>";

		private readonly string input4 = "yzbqklnj"; 
		
		private readonly List<string> input5 = new List<string>()
		{
			"sszojmmrrkwuftyv",  "isaljhemltsdzlum",  "fujcyucsrxgatisb",  "qiqqlmcgnhzparyg",  "oijbmduquhfactbc",  "jqzuvtggpdqcekgk",  "zwqadogmpjmmxijf",  "uilzxjythsqhwndh",  "gtssqejjknzkkpvw",  "wrggegukhhatygfi",  "vhtcgqzerxonhsye",  "tedlwzdjfppbmtdx",  "iuvrelxiapllaxbg",  "feybgiimfthtplui",  "qxmmcnirvkzfrjwd",  "vfarmltinsriqxpu",  "oanqfyqirkraesfq",  "xilodxfuxphuiiii",  "yukhnchvjkfwcbiq",  "bdaibcbzeuxqplop",  "ivegnnpbiyxqsion",  "ybahkbzpditgwdgt",  "dmebdomwabxgtctu",  "ibtvimgfaeonknoh",  "jsqraroxudetmfyw",  "dqdbcwtpintfcvuz",  "tiyphjunlxddenpj",  "fgqwjgntxagidhah",  "nwenhxmakxqkeehg",  "zdoheaxqpcnlhnen",  "tfetfqojqcdzlpbm",  "qpnxkuldeiituggg",  "xwttlbdwxohahwar",  "hjkwzadmtrkegzye",  "koksqrqcfwcaxeof",  "wulwmrptktliyxeq",  "gyufbedqhhyqgqzj",  "txpunzodohikzlmj",  "jloqfuejfkemcrvu",  "amnflshcheuddqtc",  "pdvcsduggcogbiia",  "yrioavgfmeafjpcz",  "uyhbtmbutozzqfvq",  "mwhgfwsgyuwcdzik",  "auqylgxhmullxpaa",  "lgelzivplaeoivzh",  "uyvcepielfcmswoa",  "qhirixgwkkccuzlp",  "zoonniyosmkeejfg",  "iayfetpixkedyana",  "ictqeyzyqswdskiy",  "ejsgqteafvmorwxe",  "lhaiqrlqqwfbrqdx",  "ydjyboqwhfpqfydc",  "dwhttezyanrnbybv",  "edgzkqeqkyojowvr",  "rmjfdwsqamjqehdq",  "ozminkgnkwqctrxz",  "bztjhxpjthchhfcd",  "vrtioawyxkivrpiq",  "dpbcsznkpkaaclyy",  "vpoypksymdwttpvz",  "hhdlruwclartkyap",  "bqkrcbrksbzcggbo",  "jerbbbnxlwfvlaiw",  "dwkasufidwjrjfbf",  "kkfxtjhbnmqbmfwf",  "vmnfziwqxmioukmj",  "rqxvcultipkecdtu",  "fhmfdibhtjzkiqsd",  "hdpjbuzzbyafqrpd",  "emszboysjuvwwvts",  "msyigmwcuybfiooq",  "druyksfnbluvnwoh",  "fvgstvynnfbvxhsx",  "bmzalvducnqtuune",  "lzwkzfzttsvpllei",  "olmplpvjamynfyfd",  "padcwfkhystsvyfb",  "wjhbvxkwtbfqdilb",  "hruaqjwphonnterf",  "bufjobjtvxtzjpmj",  "oiedrjvmlbtwyyuy",  "sgiemafwfztwsyju",  "nsoqqfudrtwszyqf",  "vonbxquiiwxnazyl",  "yvnmjxtptujwqudn",  "rrnybqhvrcgwvrkq",  "taktoxzgotzxntfu",  "quffzywzpxyaepxa",  "rfvjebfiddcfgmwv",  "iaeozntougqwnzoh",  "scdqyrhoqmljhoil",  "bfmqticltmfhxwld",  "brbuktbyqlyfpsdl",  "oidnyhjkeqenjlhd",  "kujsaiqojopvrygg",  "vebzobmdbzvjnjtk",  "uunoygzqjopwgmbg",  "piljqxgicjzgifso",  "ikgptwcjzywswqnw",  "pujqsixoisvhdvwi",  "trtuxbgigogfsbbk",  "mplstsqclhhdyaqk",  "gzcwflvmstogdpvo",  "tfjywbkmimyyqcjd",  "gijutvhruqcsiznq",  "ibxkhjvzzxgavkha",  "btnxeqvznkxjsgmq",  "tjgofgauxaelmjoq",  "sokshvyhlkxerjrv",  "ltogbivktqmtezta",  "uduwytzvqvfluyuf",  "msuckpthtgzhdxan",  "fqmcglidvhvpirzr",  "gwztkqpcwnutvfga",  "bsjfgsrntdhlpqbx",  "xloczbqybxmiopwt",  "orvevzyjliomkkgu",  "mzjbhmfjjvaziget",  "tlsdxuhwdmghdyjb",  "atoecyjhwmznaewi",  "pyxpyvvipbqibiox",  "ajbfmpqqobfsmesj",  "siknbzefjblnohgd",  "eqfhgewbblwdfkmc",  "opylbscrotckkrbk",  "lbwxbofgjkzdxkle",  "ceixfjstaptdomvm",  "hnkrqxifjmmjktie",  "aqykzeuzvvetoygd",  "fouahjimfcisxima",  "prkzhutbqsyrhjzx",  "qqwliakathnsbzne",  "sayhgqtlcqqidqhj",  "ygduolbysehdudra",  "zricvxhdzznuxuce",  "ucvzakslykpgsixd",  "udirhgcttmyspgsb",  "yuwzppjzfsjhhdzi",  "gtqergjiuwookwre",  "xvxexbjyjkxovvwf",  "mlpaqhnnkqxrmwmm",  "ezuqbrjozwuqafhb",  "mcarusdthcbsonoq",  "weeguqeheeiigrue",  "pngtfugozxofaqxv",  "copphvbjcmfspenv",  "jiyahihykjjkdaya",  "gdqnmesvptuyrfwp",  "vbdscfywqmfxbohh",  "crtrfuxyjypzubrg",  "seihvevtxywxhflp",  "fvvpmgttnapklwou",  "qmqaqsajmqwhetpk",  "zetxvrgjmblxvakr",  "kpvwblrizaabmnhz",  "mwpvvzaaicntrkcp",  "clqyjiegtdsswqfm",  "ymrcnqgcpldgfwtm",  "nzyqpdenetncgnwq",  "cmkzevgacnmdkqro",  "kzfdsnamjqbeirhi",  "kpxrvgvvxapqlued",  "rzskbnfobevzrtqu",  "vjoahbfwtydugzap",  "ykbbldkoijlvicbl",  "mfdmroiztsgjlasb",  "quoigfyxwtwprmdr",  "ekxjqafwudgwfqjm",  "obtvyjkiycxfcdpb",  "lhoihfnbuqelthof",  "eydwzitgxryktddt",  "rxsihfybacnpoyny",  "bsncccxlplqgygtw",  "rvmlaudsifnzhcqh",  "huxwsyjyebckcsnn",  "gtuqzyihwhqvjtes",  "zreeyomtngvztveq",  "nwddzjingsarhkxb",  "nuqxqtctpoldrlsh",  "wkvnrwqgjooovhpf",  "kwgueyiyffudtbyg",  "tpkzapnjxefqnmew",  "ludwccvkihagvxal",  "lfdtzhfadvabghna",  "njqmlsnrkcfhtvbb",  "cajzbqleghhnlgap",  "vmitdcozzvqvzatp",  "eelzefwqwjiywbcz",  "uyztcuptfqvymjpi",  "aorhnrpkjqqtgnfo",  "lfrxfdrduoeqmwwp",  "vszpjvbctblplinh",  "zexhadgpqfifcqrz",  "ueirfnshekpemqua",  "qfremlntihbwabtb",  "nwznunammfexltjc",  "zkyieokaaogjehwt",  "vlrxgkpclzeslqkq",  "xrqrwfsuacywczhs",  "olghlnfjdiwgdbqc",  "difnlxnedpqcsrdf",  "dgpuhiisybjpidsj",  "vlwmwrikmitmoxbt",  "sazpcmcnviynoktm",  "pratafauetiknhln",  "ilgteekhzwlsfwcn",  "ywvwhrwhkaubvkbl",  "qlaxivzwxyhvrxcf",  "hbtlwjdriizqvjfb",  "nrmsononytuwslsa",  "mpxqgdthpoipyhjc",  "mcdiwmiqeidwcglk",  "vfbaeavmjjemfrmo",  "qzcbzmisnynzibrc",  "shzmpgxhehhcejhb",  "wirtjadsqzydtyxd",  "qjlrnjfokkqvnpue",  "dxawdvjntlbxtuqc",  "wttfmnrievfestog",  "eamjfvsjhvzzaobg",  "pbvfcwzjgxahlrag",  "omvmjkqqnobvnzkn",  "lcwmeibxhhlxnkzv",  "uiaeroqfbvlazegs",  "twniyldyuonfyzqw",  "wgjkmsbwgfotdabi",  "hnomamxoxvrzvtew",  "ycrcfavikkrxxfgw",  "isieyodknagzhaxy",  "mgzdqwikzullzyco",  "mumezgtxjrrejtrs",  "nwmwjcgrqiwgfqel",  "wjgxmebfmyjnxyyp",  "durpspyljdykvzxf",  "zuslbrpooyetgafh",  "kuzrhcjwbdouhyme",  "wyxuvbciodscbvfm",  "kbnpvuqwmxwfqtqe",  "zddzercqogdpxmft",  "sigrdchxtgavzzjh",  "lznjolnorbuddgcs",  "ycnqabxlcajagwbt",  "bnaudeaexahdgxsj",  "rlnykxvoctfwanms",  "jngyetkoplrstfzt",  "tdpxknwacksotdub",  "yutqgssfoptvizgr",  "lzmqnxeqjfnsxmsa",  "iqpgfsfmukovsdgu",  "qywreehbidowtjyz",  "iozamtgusdctvnkw",  "ielmujhtmynlwcfd",  "hzxnhtbnmmejlkyf",  "ftbslbzmiqkzebtd",  "bcwdqgiiizmohack",  "dqhfkzeddjzbdlxu",  "mxopokqffisxosci",  "vciatxhtuechbylk",  "khtkhcvelidjdena",  "blatarwzfqcapkdt",  "elamngegnczctcck",  "xeicefdbwrxhuxuf",  "sawvdhjoeahlgcdr",  "kmdcimzsfkdfpnir",  "axjayzqlosrduajb",  "mfhzreuzzumvoggr",  "iqlbkbhrkptquldb",  "xcvztvlshiefuhgb",  "pkvwyqmyoazocrio",  "ajsxkdnerbmhyxaj",  "tudibgsbnpnizvsi",  "cxuiydkgdccrqvkh",  "cyztpjesdzmbcpot",  "nnazphxpanegwitx",  "uphymczbmjalmsct",  "yyxiwnlrogyzwqmg",  "gmqwnahjvvdyhnfa",  "utolskxpuoheugyl",  "mseszdhyzoyavepd",  "ycqknvbuvcjfgmlc",  "sknrxhxbfpvpeorn",  "zqxqjetooqcodwml",  "sesylkpvbndrdhsy",  "fryuxvjnsvnjrxlw",  "mfxusewqurscujnu",  "mbitdjjtgzchvkfv",  "ozwlyxtaalxofovd",  "wdqcduaykxbunpie",  "rlnhykxiraileysk",  "wgoqfrygttlamobg",  "kflxzgxvcblkpsbz",  "tmkisflhativzhde",  "owsdrfgkaamogjzd",  "gaupjkvkzavhfnes",  "wknkurddcknbdleg",  "lltviwincmbtduap",  "qwzvspgbcksyzzmb",  "ydzzkumecryfjgnk",  "jzvmwgjutxoysaam",  "icrwpyhxllbardkr",  "jdopyntshmvltrve",  "afgkigxcuvmdbqou",  "mfzzudntmvuyhjzt",  "duxhgtwafcgrpihc",  "tsnhrkvponudumeb",  "sqtvnbeiigdzbjgv",  "eczmkqwvnsrracuo",  "mhehsgqwiczaiaxv",  "kaudmfvifovrimpd",  "lupikgivechdbwfr",  "mwaaysrndiutuiqx",  "aacuiiwgaannunmm",  "tjqjbftaqitukwzp",  "lrcqyskykbjpaekn",  "lirrvofbcqpjzxmr",  "jurorvzpplyelfml",  "qonbllojmloykjqe",  "sllkzqujfnbauuqp",  "auexjwsvphvikali",  "usuelbssqmbrkxyc",  "wyuokkfjexikptvv",  "wmfedauwjgbrgytl",  "sfwvtlzzebxzmuvw",  "rdhqxuechjsjcvaf",  "kpavhqkukugocsxu",  "ovnjtumxowbxduts",  "zgerpjufauptxgat",  "pevvnzjfwhjxdoxq",  "pmmfwxajgfziszcs",  "difmeqvaghuitjhs",  "icpwjbzcmlcterwm",  "ngqpvhajttxuegyh",  "mosjlqswdngwqsmi",  "frlvgpxrjolgodlu",  "eazwgrpcxjgoszeg",  "bbtsthgkjrpkiiyk",  "tjonoglufuvsvabe",  "xhkbcrofytmbzrtk",  "kqftfzdmpbxjynps",  "kmeqpocbnikdtfyv",  "qjjymgqxhnjwxxhp",  "dmgicrhgbngdtmjt",  "zdxrhdhbdutlawnc",  "afvoekuhdboxghvx",  "hiipezngkqcnihty",  "bbmqgheidenweeov",  "suprgwxgxwfsgjnx",  "adeagikyamgqphrj",  "zzifqinoeqaorjxg",  "adhgppljizpaxzld",  "lvxyieypvvuqjiyc",  "nljoakatwwwoovzn",  "fcrkfxclcacshhmx",  "ownnxqtdhqbgthch",  "lmfylrcdmdkgpwnj",  "hlwjfbvlswbzpbjr",  "mkofhdtljdetcyvp",  "synyxhifbetzarpo",  "agnggugngadrcxoc",  "uhttadmdmhidpyjw",  "ohfwjfhunalbubpr",  "pzkkkkwrlvxiuysn",  "kmidbxmyzkjrwjhu",  "egtitdydwjxmajnw",  "civoeoiuwtwgbqqs",  "dfptsguzfinqoslk",  "tdfvkreormspprer",  "zvnvbrmthatzztwi",  "ffkyddccrrfikjde",  "hrrmraevdnztiwff",  "qaeygykcpbtjwjbr",  "purwhitkmrtybslh",  "qzziznlswjaussel",  "dfcxkvdpqccdqqxj",  "tuotforulrrytgyn",  "gmtgfofgucjywkev",  "wkyoxudvdkbgpwhd",  "qbvktvfvipftztnn",  "otckgmojziezmojb",  "inxhvzbtgkjxflay",  "qvxapbiatuudseno",  "krpvqosbesnjntut",  "oqeukkgjsfuqkjbb",  "prcjnyymnqwqksiz",  "vuortvjxgckresko",  "orqlyobvkuwgathr",  "qnpyxlnazyfuijox",  "zwlblfkoklqmqzkw",  "hmwurwtpwnrcsanl",  "jzvxohuakopuzgpf",  "sfcpnxrviphhvxmx",  "qtwdeadudtqhbely",  "dbmkmloasqphnlgj",  "olylnjtkxgrubmtk",  "nxsdbqjuvwrrdbpq",  "wbabpirnpcsmpipw",  "hjnkyiuxpqrlvims",  "enzpntcjnxdpuqch",  "vvvqhlstzcizyimn",  "triozhqndbttglhv",  "fukvgteitwaagpzx",  "uhcvukfbmrvskpen",  "tizcyupztftzxdmt",  "vtkpnbpdzsaluczz",  "wodfoyhoekidxttm",  "otqocljrmwfqbxzu",  "linfbsnfvixlwykn",  "vxsluutrwskslnye",  "zbshygtwugixjvsi",  "zdcqwxvwytmzhvoo",  "wrseozkkcyctrmei",  "fblgtvogvkpqzxiy",  "opueqnuyngegbtnf",  "qxbovietpacqqxok",  "zacrdrrkohfygddn",  "gbnnvjqmkdupwzpq",  "qgrgmsxeotozvcak",  "hnppukzvzfmlokid",  "dzbheurndscrrtcl",  "wbgdkadtszebbrcw",  "fdmzppzphhpzyuiz",  "bukomunhrjrypohj",  "ohodhelegxootqbj",  "rsplgzarlrknqjyh",  "punjjwpsxnhpzgvu",  "djdfahypfjvpvibm",  "mlgrqsmhaozatsvy",  "xwktrgyuhqiquxgn",  "wvfaoolwtkbrisvf",  "plttjdmguxjwmeqr",  "zlvvbwvlhauyjykw",  "cigwkbyjhmepikej",  "masmylenrusgtyxs",  "hviqzufwyetyznze",  "nzqfuhrooswxxhus",  "pdbdetaqcrqzzwxf",  "oehmvziiqwkzhzib",  "icgpyrukiokmytoy",  "ooixfvwtiafnwkce",  "rvnmgqggpjopkihs",  "wywualssrmaqigqk",  "pdbvflnwfswsrirl",  "jeaezptokkccpbuj",  "mbdwjntysntsaaby",  "ldlgcawkzcwuxzpz",  "lwktbgrzswbsweht",  "ecspepmzarzmgpjm",  "qmfyvulkmkxjncai",  "izftypvwngiukrns",  "zgmnyjfeqffbooww",  "nyrkhggnprhedows",  "yykzzrjmlevgffah",  "mavaemfxhlfejfki",  "cmegmfjbkvpncqwf",  "zxidlodrezztcrij",  "fseasudpgvgnysjv",  "fupcimjupywzpqzp",  "iqhgokavirrcvyys",  "wjmkcareucnmfhui",  "nftflsqnkgjaexhq",  "mgklahzlcbapntgw",  "kfbmeavfxtppnrxn",  "nuhyvhknlufdynvn",  "nviogjxbluwrcoec",  "tyozixxxaqiuvoys",  "kgwlvmvgtsvxojpr",  "moeektyhyonfdhrb",  "kahvevmmfsmiiqex",  "xcywnqzcdqtvhiwd",  "fnievhiyltbvtvem",  "jlmndqufirwgtdxd",  "muypbfttoeelsnbs",  "rypxzbnujitfwkou",  "ubmmjbznskildeoj",  "ofnmizdeicrmkjxp",  "rekvectjbmdnfcib",  "yohrojuvdexbctdh",  "gwfnfdeibynzjmhz",  "jfznhfcqdwlpjull",  "scrinzycfhwkmmso",  "mskutzossrwoqqsi",  "rygoebkzgyzushhr",  "jpjqiycflqkexemx",  "arbufysjqmgaapnl",  "dbjerflevtgweeoj",  "snybnnjlmwjvhois",  "fszuzplntraprmbj",  "mkvaatolvuggikvg",  "zpuzuqygoxesnuyc",  "wnpxvmxvllxalulm",  "eivuuafkvudeouwy",  "rvzckdyixetfuehr",  "qgmnicdoqhveahyx",  "miawwngyymshjmpj",  "pvckyoncpqeqkbmx",  "llninfenrfjqxurv",  "kzbjnlgsqjfuzqtp",  "rveqcmxomvpjcwte",  "bzotkawzbopkosnx",  "ktqvpiribpypaymu",  "wvlzkivbukhnvram",  "uohntlcoguvjqqdo",  "ajlsiksjrcnzepkt",  "xsqatbldqcykwusd",  "ihbivgzrwpmowkop",  "vfayesfojmibkjpb",  "uaqbnijtrhvqxjtb",  "hhovshsfmvkvymba",  "jerwmyxrfeyvxcgg",  "hncafjwrlvdcupma",  "qyvigggxfylbbrzt",  "hiiixcyohmvnkpgk",  "mmitpwopgxuftdfu",  "iaxderqpceboixoa",  "zodfmjhuzhnsqfcb",  "sthtcbadrclrazsi",  "bkkkkcwegvypbrio",  "wmpcofuvzemunlhj",  "gqwebiifvqoeynro",  "juupusqdsvxcpsgv",  "rbhdfhthxelolyse",  "kjimpwnjfrqlqhhz",  "rcuigrjzarzpjgfq",  "htxcejfyzhydinks",  "sxucpdxhvqjxxjwf",  "omsznfcimbcwaxal",  "gufmtdlhgrsvcosb",  "bssshaqujtmluerz",  "uukotwjkstgwijtr",  "kbqkneobbrdogrxk",  "ljqopjcjmelgrakz",  "rwtfnvnzryujwkfb",  "dedjjbrndqnilbeh",  "nzinsxnpptzagwlb",  "lwqanydfirhnhkxy",  "hrjuzfumbvfccxno",  "okismsadkbseumnp",  "sfkmiaiwlktxqvwa",  "hauwpjjwowbunbjj",  "nowkofejwvutcnui",  "bqzzppwoslaeixro",  "urpfgufwbtzenkpj",  "xgeszvuqwxeykhef",  "yxoldvkyuikwqyeq",  "onbbhxrnmohzskgg",  "qcikuxakrqeugpoa",  "lnudcqbtyzhlpers",  "nxduvwfrgzaailgl",  "xniuwvxufzxjjrwz",  "ljwithcqmgvntjdj",  "awkftfagrfzywkhs",  "uedtpzxyubeveuek",  "bhcqdwidbjkqqhzl",  "iyneqjdmlhowwzxx",  "kvshzltcrrururty",  "zgfpiwajegwezupo",  "tkrvyanujjwmyyri",  "ercsefuihcmoaiep",  "ienjrxpmetinvbos",  "jnwfutjbgenlipzq",  "bgohjmrptfuamzbz",  "rtsyamajrhxbcncw",  "tfjdssnmztvbnscs",  "bgaychdlmchngqlp",  "kfjljiobynhwfkjo",  "owtdxzcpqleftbvn",  "ltjtimxwstvzwzjj",  "wbrvjjjajuombokf",  "zblpbpuaqbkvsxye",  "gwgdtbpnlhyqspdi",  "abipqjihjqfofmkx",  "nlqymnuvjpvvgova",  "avngotmhodpoufzn",  "qmdyivtzitnrjuae",  "xfwjmqtqdljuerxi",  "csuellnlcyqaaamq",  "slqyrcurcyuoxquo",  "dcjmxyzbzpohzprl",  "uqfnmjwniyqgsowb",  "rbmxpqoblyxdocqc",  "ebjclrdbqjhladem",  "ainnfhxnsgwqnmyo",  "eyytjjwhvodtzquf",  "iabjgmbbhilrcyyp",  "pqfnehkivuelyccc",  "xgjbyhfgmtseiimt",  "jwxyqhdbjiqqqeyy",  "gxsbrncqkmvaryln",  "vhjisxjkinaejytk",  "seexagcdmaedpcvh",  "lvudfgrcpjxzdpvd",  "fxtegyrqjzhmqean",  "dnoiseraqcoossmc",  "nwrhmwwbykvwmgep",  "udmzskejvizmtlce",  "hbzvqhvudfdlegaa",  "cghmlfqejbxewskv",  "bntcmjqfwomtbwsb",  "qezhowyopjdyhzng",  "todzsocdkgfxanbz",  "zgjkssrjlwxuhwbk",  "eibzljqsieriyrzr",  "wamxvzqyycrxotjp",  "epzvfkispwqynadu",  "dwlpfhtrafrxlyie",  "qhgzujhgdruowoug",  "girstvkahaemmxvh",  "baitcrqmxhazyhbl",  "xyanqcchbhkajdmc",  "gfvjmmcgfhvgnfdq",  "tdfdbslwncbnkzyz",  "jojuselkpmnnbcbb",  "hatdslkgxtqpmavj",  "dvelfeddvgjcyxkj",  "gnsofhkfepgwltse",  "mdngnobasfpewlno",  "qssnbcyjgmkyuoga",  "glvcmmjytmprqwvn",  "gwrixumjbcdffsdl",  "lozravlzvfqtsuiq",  "sicaflbqdxbmdlch",  "inwfjkyyqbwpmqlq",  "cuvszfotxywuzhzi",  "igfxyoaacoarlvay",  "ucjfhgdmnjvgvuni",  "rvvkzjsytqgiposh",  "jduinhjjntrmqroz",  "yparkxbgsfnueyll",  "lyeqqeisxzfsqzuj",  "woncskbibjnumydm",  "lltucklragtjmxtl",  "ubiyvmyhlesfxotj",  "uecjseeicldqrqww",  "xxlxkbcthufnjbnm",  "lhqijovvhlffpxga",  "fzdgqpzijitlogjz",  "efzzjqvwphomxdpd",  "jvgzvuyzobeazssc",  "hejfycgxywfjgbfw",  "yhjjmvkqfbnbliks",  "sffvfyywtlntsdsz",  "dwmxqudvxqdenrur",  "asnukgppdemxrzaz",  "nwqfnumblwvdpphx",  "kqsmkkspqvxzuket",  "cpnraovljzqiquaz",  "qrzgrdlyyzbyykhg",  "opoahcbiydyhsmqe",  "hjknnfdauidjeydr",  "hczdjjlygoezadow",  "rtflowzqycimllfv",  "sfsrgrerzlnychhq",  "bpahuvlblcolpjmj",  "albgnjkgmcrlaicl",  "pijyqdhfxpaxzdex",  "eeymiddvcwkpbpux",  "rqwkqoabywgggnln",  "vckbollyhgbgmgwh",  "ylzlgvnuvpynybkm",  "hpmbxtpfosbsjixt",  "ocebeihnhvkhjfqz",  "tvctyxoujdgwayze",  "efvhwxtuhapqxjen",  "rusksgefyidldmpo",  "nkmtjvddfmhirmzz",  "whvtsuadwofzmvrt",  "iiwjqvsdxudhdzzk",  "gucirgxaxgcassyo",  "rmhfasfzexeykwmr",  "hynlxcvsbgosjbis",  "huregszrcaocueen",  "pifezpoolrnbdqtv",  "unatnixzvdbqeyox",  "xtawlpduxgacchfe",  "bdvdbflqfphndduf",  "xtdsnjnmzccfptyt",  "nkhsdkhqtzqbphhg",  "aqcubmfkczlaxiyb",  "moziflxpsfubucmv",  "srdgnnjtfehiimqx",  "pwfalehdfyykrohf",  "sysxssmvewyfjrve",  "brsemdzosgqvvlxe",  "bimbjoshuvflkiat",  "hkgjasmljkpkwwku",  "sbnmwjvodygobpqc",  "bbbqycejueruihhd",  "corawswvlvneipyc",  "gcyhknmwsczcxedh",  "kppakbffdhntmcqp",  "ynulzwkfaemkcefp",  "pyroowjekeurlbii",  "iwksighrswdcnmxf",  "glokrdmugreygnsg",  "xkmvvumnfzckryop",  "aesviofpufygschi",  "csloawlirnegsssq",  "fkqdqqmlzuxbkzbc",  "uzlhzcfenxdfjdzp",  "poaaidrktteusvyf",  "zrlyfzmjzfvivcfr",  "qwjulskbniitgqtx",  "gjeszjksbfsuejki",  "vczdejdbfixbduaq",  "knjdrjthitjxluth",  "jweydeginrnicirl",  "bottrfgccqhyycsl",  "eiquffofoadmbuhk",  "lbqfutmzoksscswf",  "xfmdvnvfcnzjprba",  "uvugkjbkhlaoxmyx",  "wadlgtpczgvcaqqv",  "inzrszbtossflsxk",  "dbzbtashaartczrj",  "qbjiqpccefcfkvod",  "hluujmokjywotvzy",  "thwlliksfztcmwzh",  "arahybspdaqdexrq",  "nuojrmsgyipdvwyx",  "hnajdwjwmzattvst",  "sulcgaxezkprjbgu",  "rjowuugwdpkjtypw",  "oeugzwuhnrgiaqga",  "wvxnyymwftfoswij",  "pqxklzkjpcqscvde",  "tuymjzknntekglqj",  "odteewktugcwlhln",  "exsptotlfecmgehc",  "eeswfcijtvzgrqel",  "vjhrkiwmunuiwqau",  "zhlixepkeijoemne",  "pavfsmwesuvebzdd",  "jzovbklnngfdmyws",  "nbajyohtzfeoiixz",  "ciozmhrsjzrwxvhz",  "gwucrxieqbaqfjuv",  "uayrxrltnohexawc",  "flmrbhwsfbcquffm",  "gjyabmngkitawlxc",  "rwwtggvaygfbovhg",  "xquiegaisynictjq",  "oudzwuhexrwwdbyy",  "lengxmguyrwhrebb",  "uklxpglldbgqsjls",  "dbmvlfeyguydfsxq",  "zspdwdqcrmtmdtsc",  "mqfnzwbfqlauvrgc",  "amcrkzptgacywvhv",  "ndxmskrwrqysrndf",  "mwjyhsufeqhwisju",  "srlrukoaenyevykt",  "tnpjtpwawrxbikct",  "geczalxmgxejulcv",  "tvkcbqdhmuwcxqci",  "tiovluvwezwwgaox",  "zrjhtbgajkjqzmfo",  "vcrywduwsklepirs",  "lofequdigsszuioy",  "wxsdzomkjqymlzat",  "iabaczqtrfbmypuy",  "ibdlmudbajikcncr",  "rqcvkzsbwmavdwnv",  "ypxoyjelhllhbeog",  "fdnszbkezyjbttbg",  "uxnhrldastpdjkdz",  "xfrjbehtxnlyzcka",  "omjyfhbibqwgcpbv",  "eguucnoxaoprszmp",  "xfpypldgcmcllyzz",  "aypnmgqjxjqceelv",  "mgzharymejlafvgf",  "tzowgwsubbaigdok",  "ilsehjqpcjwmylxc",  "pfmouwntfhfnmrwk",  "csgokybgdqwnduwp",  "eaxwvxvvwbrovypz",  "nmluqvobbbmdiwwb",  "lnkminvfjjzqbmio",  "mjiiqzycqdhfietz",  "towlrzriicyraevq",  "obiloewdvbrsfwjo",  "lmeooaajlthsfltw",  "ichygipzpykkesrw",  "gfysloxmqdsfskvt",  "saqzntehjldvwtsx",  "pqddoemaufpfcaew",  "mjrxvbvwcreaybwe",  "ngfbrwfqnxqosoai",  "nesyewxreiqvhald",  "kqhqdlquywotcyfy",  "liliptyoqujensfi",  "nsahsaxvaepzneqq",  "zaickulfjajhctye",  "gxjzahtgbgbabtht",  "koxbuopaqhlsyhrp",  "jhzejdjidqqtjnwe",  "dekrkdvprfqpcqki",  "linwlombdqtdeyop",  "dvckqqbnigdcmwmx",  "yaxygbjpzkvnnebv",  "rlzkdkgaagmcpxah",  "cfzuyxivtknirqvt",  "obivkajhsjnrxxhn",  "lmjhayymgpseuynn",  "bbjyewkwadaipyju",  "lmzyhwomfypoftuu",  "gtzhqlgltvatxack",  "jfflcfaqqkrrltgq",  "txoummmnzfrlrmcg",  "ohemsbfuqqpucups",  "imsfvowcbieotlok",  "tcnsnccdszxfcyde",  "qkcdtkwuaquajazz",  "arcfnhmdjezdbqku",  "srnocgyqrlcvlhkb",  "mppbzvfmcdirbyfw",  "xiuarktilpldwgwd",  "ypufwmhrvzqmexpc",  "itpdnsfkwgrdujmj",  "cmpxnodtsswkyxkr",  "wayyxtjklfrmvbfp",  "mfaxphcnjczhbbwy",  "sjxhgwdnqcofbdra",  "pnxmujuylqccjvjm",  "ivamtjbvairwjqwl",  "deijtmzgpfxrclss",  "bzkqcaqagsynlaer",  "tycefobvxcvwaulz",  "ctbhnywezxkdsswf",  "urrxxebxrthtjvib",  "fpfelcigwqwdjucv",  "ngfcyyqpqulwcphb",  "rltkzsiipkpzlgpw",  "qfdsymzwhqqdkykc",  "balrhhxipoqzmihj",  "rnwalxgigswxomga",  "ghqnxeogckshphgr",  "lyyaentdizaumnla",  "exriodwfzosbeoib",  "speswfggibijfejk",  "yxmxgfhvmshqszrq",  "hcqhngvahzgawjga",  "qmhlsrfpesmeksur",  "eviafjejygakodla",  "kvcfeiqhynqadbzv",  "fusvyhowslfzqttg",  "girqmvwmcvntrwau",  "yuavizroykfkdekz",  "jmcwohvmzvowrhxf",  "kzimlcpavapynfue",  "wjudcdtrewfabppq",  "yqpteuxqgbmqfgxh",  "xdgiszbuhdognniu",  "jsguxfwhpftlcjoh",  "whakkvspssgjzxre",  "ggvnvjurlyhhijgm",  "krvbhjybnpemeptr",  "pqedgfojyjybfbzr",  "jzhcrsgmnkwwtpdo",  "yyscxoxwofslncmp",  "gzjhnxytmyntzths",  "iteigbnqbtpvqumi",  "zjevfzusnjukqpfw",  "xippcyhkfuounxqk",  "mcnhrcfonfdgpkyh",  "pinkcyuhjkexbmzj",  "lotxrswlxbxlxufs",  "fmqajrtoabpckbnu",  "wfkwsgmcffdgaqxg",  "qfrsiwnohoyfbidr",  "czfqbsbmiuyusaqs",  "ieknnjeecucghpoo",  "cevdgqnugupvmsge",  "gjkajcyjnxdrtuvr",  "udzhrargnujxiclq",  "zqqrhhmjwermjssg",  "ggdivtmgoqajydzz",  "wnpfsgtxowkjiivl",  "afbhqawjbotxnqpd",  "xjpkifkhfjeqifdn",  "oyfggzsstfhvticp",  "kercaetahymeawxy",  "khphblhcgmbupmzt",  "iggoqtqpvaebtiol",  "ofknifysuasshoya",  "qxuewroccsbogrbv",  "apsbnbkiopopytgu",  "zyahfroovfjlythh",  "bxhjwfgeuxlviydq",  "uvbhdtvaypasaswa",  "qamcjzrmesqgqdiz",  "hjnjyzrxntiycyel",  "wkcrwqwniczwdxgq",  "hibxlvkqakusswkx",  "mzjyuenepwdgrkty",  "tvywsoqslfsulses",  "jqwcwuuisrclircv",  "xanwaoebfrzhurct",  "ykriratovsvxxasf",  "qyebvtqqxbjuuwuo",  "telrvlwvriylnder",  "acksrrptgnhkeiaa",  "yemwfjhiqlzsvdxf",  "banrornfkcymmkcc",  "ytbhxvaeiigjpcgm",  "crepyazgxquposkn",  "xlqwdrytzwnxzwzv",  "xtrbfbwopxscftps",  "kwbytzukgseeyjla",  "qtfdvavvjogybxjg",  "ytbmvmrcxwfkgvzw",  "nbscbdskdeocnfzr",  "sqquwjbdxsxhcseg",  "ewqxhigqcgszfsuw",  "cvkyfcyfmubzwsee",  "dcoawetekigxgygd",  "ohgqnqhfimyuqhvi",  "otisopzzpvnhctte",  "bauieohjejamzien",  "ewnnopzkujbvhwce",  "aeyqlskpaehagdiv",  "pncudvivwnnqspxy",  "ytugesilgveokxcg",  "zoidxeelqdjesxpr",  "ducjccsuaygfchzj",  "smhgllqqqcjfubfc",  "nlbyyywergronmir",  "prdawpbjhrzsbsvj",  "nmgzhnjhlpcplmui",  "eflaogtjghdjmxxz",  "qolvpngucbkprrdc",  "ixywxcienveltgho",  "mwnpqtocagenkxut",  "iskrfbwxonkguywx",  "ouhtbvcaczqzmpua",  "srewprgddfgmdbao",  "dyufrltacelchlvu",  "czmzcbrkecixuwzz",  "dtbeojcztzauofuk",  "prrgoehpqhngfgmw",  "baolzvfrrevxsyke",  "zqadgxshwiarkzwh",  "vsackherluvurqqj",  "surbpxdulvcvgjbd",  "wqxytarcxzgxhvtx",  "vbcubqvejcfsgrac",  "zqnjfeapshjowzja",  "hekvbhtainkvbynx",  "knnugxoktxpvoxnh",  "knoaalcefpgtvlwm",  "qoakaunowmsuvkus",  "ypkvlzcduzlezqcb",  "ujhcagawtyepyogh",  "wsilcrxncnffaxjf",  "gbbycjuscquaycrk",  "aduojapeaqwivnly",  "ceafyxrakviagcjy",  "nntajnghicgnrlst",  "vdodpeherjmmvbje",  "wyyhrnegblwvdobn",  "xlfurpghkpbzhhif",  "xyppnjiljvirmqjo",  "kglzqahipnddanpi",  "omjateouxikwxowr",  "ocifnoopfglmndcx",  "emudcukfbadyijev",  "ooktviixetfddfmh",  "wtvrhloyjewdeycg",  "cgjncqykgutfjhvb",  "nkwvpswppeffmwad",  "hqbcmfhzkxmnrivg",  "mdskbvzguxvieilr",  "anjcvqpavhdloaqh",  "erksespdevjylenq",  "fadxwbmisazyegup",  "iyuiffjmcaahowhj",  "ygkdezmynmltodbv",  "fytneukxqkjattvh",  "woerxfadbfrvdcnz",  "iwsljvkyfastccoa",  "movylhjranlorofe",  "drdmicdaiwukemep",  "knfgtsmuhfcvvshg",  "ibstpbevqmdlhajn",  "tstwsswswrxlzrqs",  "estyydmzothggudf",  "jezogwvymvikszwa",  "izmqcwdyggibliet",  "nzpxbegurwnwrnca",  "kzkojelnvkwfublh",  "xqcssgozuxfqtiwi",  "tcdoigumjrgvczfv",  "ikcjyubjmylkwlwq",  "kqfivwystpqzvhan",  "bzukgvyoqewniivj",  "iduapzclhhyfladn",  "fbpyzxdfmkrtfaeg",  "yzsmlbnftftgwadz"
		};

		private readonly List<string> input6 = new List<string>()
		{
			"turn on 887,9 through 959,629", "turn on 454,398 through 844,448", "turn off 539,243 through 559,965", "turn off 370,819 through 676,868", "turn off 145,40 through 370,997", "turn off 301,3 through 808,453", "turn on 351,678 through 951,908", "toggle 720,196 through 897,994", "toggle 831,394 through 904,860", "toggle 753,664 through 970,926", "turn off 150,300 through 213,740", "turn on 141,242 through 932,871", "toggle 294,259 through 474,326", "toggle 678,333 through 752,957", "toggle 393,804 through 510,976", "turn off 6,964 through 411,976", "turn off 33,572 through 978,590", "turn on 579,693 through 650,978", "turn on 150,20 through 652,719", "turn off 782,143 through 808,802", "turn off 240,377 through 761,468", "turn off 899,828 through 958,967", "turn on 613,565 through 952,659", "turn on 295,36 through 964,978", "toggle 846,296 through 969,528", "turn off 211,254 through 529,491", "turn off 231,594 through 406,794", "turn off 169,791 through 758,942", "turn on 955,440 through 980,477", "toggle 944,498 through 995,928", "turn on 519,391 through 605,718", "toggle 521,303 through 617,366", "turn off 524,349 through 694,791", "toggle 391,87 through 499,792", "toggle 562,527 through 668,935", "turn off 68,358 through 857,453", "toggle 815,811 through 889,828", "turn off 666,61 through 768,87", "turn on 27,501 through 921,952", "turn on 953,102 through 983,471", "turn on 277,552 through 451,723", "turn off 64,253 through 655,960", "turn on 47,485 through 734,977", "turn off 59,119 through 699,734", "toggle 407,898 through 493,955", "toggle 912,966 through 949,991", "turn on 479,990 through 895,990", "toggle 390,589 through 869,766", "toggle 593,903 through 926,943", "toggle 358,439 through 870,528", "turn off 649,410 through 652,875", "turn on 629,834 through 712,895", "toggle 254,555 through 770,901", "toggle 641,832 through 947,850", "turn on 268,448 through 743,777", "turn off 512,123 through 625,874", "turn off 498,262 through 930,811", "turn off 835,158 through 886,242", "toggle 546,310 through 607,773", "turn on 501,505 through 896,909", "turn off 666,796 through 817,924", "toggle 987,789 through 993,809", "toggle 745,8 through 860,693", "toggle 181,983 through 731,988", "turn on 826,174 through 924,883", "turn on 239,228 through 843,993", "turn on 205,613 through 891,667", "toggle 867,873 through 984,896", "turn on 628,251 through 677,681", "toggle 276,956 through 631,964", "turn on 78,358 through 974,713", "turn on 521,360 through 773,597", "turn off 963,52 through 979,502", "turn on 117,151 through 934,622", "toggle 237,91 through 528,164", "turn on 944,269 through 975,453", "toggle 979,460 through 988,964", "turn off 440,254 through 681,507", "toggle 347,100 through 896,785", "turn off 329,592 through 369,985", "turn on 931,960 through 979,985", "toggle 703,3 through 776,36", "toggle 798,120 through 908,550", "turn off 186,605 through 914,709", "turn off 921,725 through 979,956", "toggle 167,34 through 735,249", "turn on 726,781 through 987,936", "toggle 720,336 through 847,756", "turn on 171,630 through 656,769", "turn off 417,276 through 751,500", "toggle 559,485 through 584,534", "turn on 568,629 through 690,873", "toggle 248,712 through 277,988", "toggle 345,594 through 812,723", "turn off 800,108 through 834,618", "turn off 967,439 through 986,869", "turn on 842,209 through 955,529", "turn on 132,653 through 357,696", "turn on 817,38 through 973,662", "turn off 569,816 through 721,861", "turn on 568,429 through 945,724", "turn on 77,458 through 844,685", "turn off 138,78 through 498,851", "turn on 136,21 through 252,986", "turn off 2,460 through 863,472", "turn on 172,81 through 839,332", "turn on 123,216 through 703,384", "turn off 879,644 through 944,887", "toggle 227,491 through 504,793", "toggle 580,418 through 741,479", "toggle 65,276 through 414,299", "toggle 482,486 through 838,931", "turn off 557,768 through 950,927", "turn off 615,617 through 955,864", "turn on 859,886 through 923,919", "turn on 391,330 through 499,971", "toggle 521,835 through 613,847", "turn on 822,787 through 989,847", "turn on 192,142 through 357,846", "turn off 564,945 through 985,945", "turn off 479,361 through 703,799", "toggle 56,481 through 489,978", "turn off 632,991 through 774,998", "toggle 723,526 through 945,792", "turn on 344,149 through 441,640", "toggle 568,927 through 624,952", "turn on 621,784 through 970,788", "toggle 665,783 through 795,981", "toggle 386,610 through 817,730", "toggle 440,399 through 734,417", "toggle 939,201 through 978,803", "turn off 395,883 through 554,929", "turn on 340,309 through 637,561", "turn off 875,147 through 946,481", "turn off 945,837 through 957,922", "turn off 429,982 through 691,991", "toggle 227,137 through 439,822", "toggle 4,848 through 7,932", "turn off 545,146 through 756,943", "turn on 763,863 through 937,994", "turn on 232,94 through 404,502", "turn off 742,254 through 930,512", "turn on 91,931 through 101,942", "toggle 585,106 through 651,425", "turn on 506,700 through 567,960", "turn off 548,44 through 718,352", "turn off 194,827 through 673,859", "turn off 6,645 through 509,764", "turn off 13,230 through 821,361", "turn on 734,629 through 919,631", "toggle 788,552 through 957,972", "toggle 244,747 through 849,773", "turn off 162,553 through 276,887", "turn off 569,577 through 587,604", "turn off 799,482 through 854,956", "turn on 744,535 through 909,802", "toggle 330,641 through 396,986", "turn off 927,458 through 966,564", "toggle 984,486 through 986,913", "toggle 519,682 through 632,708", "turn on 984,977 through 989,986", "toggle 766,423 through 934,495", "turn on 17,509 through 947,718", "turn on 413,783 through 631,903", "turn on 482,370 through 493,688", "turn on 433,859 through 628,938", "turn off 769,549 through 945,810", "turn on 178,853 through 539,941", "turn off 203,251 through 692,433", "turn off 525,638 through 955,794", "turn on 169,70 through 764,939", "toggle 59,352 through 896,404", "toggle 143,245 through 707,320", "turn off 103,35 through 160,949", "toggle 496,24 through 669,507", "turn off 581,847 through 847,903", "turn on 689,153 through 733,562", "turn on 821,487 through 839,699", "turn on 837,627 through 978,723", "toggle 96,748 through 973,753", "toggle 99,818 through 609,995", "turn on 731,193 through 756,509", "turn off 622,55 through 813,365", "turn on 456,490 through 576,548", "turn on 48,421 through 163,674", "turn off 853,861 through 924,964", "turn off 59,963 through 556,987", "turn on 458,710 through 688,847", "toggle 12,484 through 878,562", "turn off 241,964 through 799,983", "turn off 434,299 through 845,772", "toggle 896,725 through 956,847", "turn on 740,289 through 784,345", "turn off 395,840 through 822,845", "turn on 955,224 through 996,953", "turn off 710,186 through 957,722", "turn off 485,949 through 869,985", "turn on 848,209 through 975,376", "toggle 221,241 through 906,384", "turn on 588,49 through 927,496", "turn on 273,332 through 735,725", "turn on 505,962 through 895,962", "toggle 820,112 through 923,143", "turn on 919,792 through 978,982", "toggle 489,461 through 910,737", "turn off 202,642 through 638,940", "turn off 708,953 through 970,960", "toggle 437,291 through 546,381", "turn on 409,358 through 837,479", "turn off 756,279 through 870,943", "turn off 154,657 through 375,703", "turn off 524,622 through 995,779", "toggle 514,221 through 651,850", "toggle 808,464 through 886,646", "toggle 483,537 through 739,840", "toggle 654,769 through 831,825", "turn off 326,37 through 631,69", "turn off 590,570 through 926,656", "turn off 881,913 through 911,998", "turn on 996,102 through 998,616", "turn off 677,503 through 828,563", "turn on 860,251 through 877,441", "turn off 964,100 through 982,377", "toggle 888,403 through 961,597", "turn off 632,240 through 938,968", "toggle 731,176 through 932,413", "turn on 5,498 through 203,835", "turn on 819,352 through 929,855", "toggle 393,813 through 832,816", "toggle 725,689 through 967,888", "turn on 968,950 through 969,983", "turn off 152,628 through 582,896", "turn off 165,844 through 459,935", "turn off 882,741 through 974,786", "turn off 283,179 through 731,899", "toggle 197,366 through 682,445", "turn on 106,309 through 120,813", "toggle 950,387 through 967,782", "turn off 274,603 through 383,759", "turn off 155,665 through 284,787", "toggle 551,871 through 860,962", "turn off 30,826 through 598,892", "toggle 76,552 through 977,888", "turn on 938,180 through 994,997", "toggle 62,381 through 993,656", "toggle 625,861 through 921,941", "turn on 685,311 through 872,521", "turn on 124,934 through 530,962", "turn on 606,379 through 961,867", "turn off 792,735 through 946,783", "turn on 417,480 through 860,598", "toggle 178,91 through 481,887", "turn off 23,935 through 833,962", "toggle 317,14 through 793,425", "turn on 986,89 through 999,613", "turn off 359,201 through 560,554", "turn off 729,494 through 942,626", "turn on 204,143 through 876,610", "toggle 474,97 through 636,542", "turn off 902,924 through 976,973", "turn off 389,442 through 824,638", "turn off 622,863 through 798,863", "turn on 840,622 through 978,920", "toggle 567,374 through 925,439", "turn off 643,319 through 935,662", "toggle 185,42 through 294,810", "turn on 47,124 through 598,880", "toggle 828,303 through 979,770", "turn off 174,272 through 280,311", "turn off 540,50 through 880,212", "turn on 141,994 through 221,998", "turn on 476,695 through 483,901", "turn on 960,216 through 972,502", "toggle 752,335 through 957,733", "turn off 419,713 through 537,998", "toggle 772,846 through 994,888", "turn on 881,159 through 902,312", "turn off 537,651 through 641,816", "toggle 561,947 through 638,965", "turn on 368,458 through 437,612", "turn on 290,149 through 705,919", "turn on 711,918 through 974,945", "toggle 916,242 through 926,786", "toggle 522,272 through 773,314", "turn on 432,897 through 440,954", "turn off 132,169 through 775,380", "toggle 52,205 through 693,747", "toggle 926,309 through 976,669", "turn off 838,342 through 938,444", "turn on 144,431 through 260,951", "toggle 780,318 through 975,495", "turn off 185,412 through 796,541", "turn on 879,548 through 892,860", "turn on 294,132 through 460,338", "turn on 823,500 through 899,529", "turn off 225,603 through 483,920", "toggle 717,493 through 930,875", "toggle 534,948 through 599,968", "turn on 522,730 through 968,950", "turn off 102,229 through 674,529"
		};

		private readonly List<string> input8 = new List<string>()
		{
			@"\xa8br\x8bjr\""", @"nq", @"zjrfcpbktjmrzgsz\xcaqsc\x03n\""huqab", @"daz--zyyxddpwk", @"draes\xa2n--g\x27ek\""lj\""--viqych", @"nnx--krnrfomdnt\x2flbl\xd2xpo\""cp\""k", @"kwdaapalq", @"u\""ptk", @"ckhorczuiudfjmmcc--u\""wozqxibsfjma", @"ydctdrxat\""pd\""lwi\""bjesevfw\xe8", @"v\""\xa8rrzep\""\""r", @"nbydghkfvmq--\xe0\""lfsrsvlsj\""i\x61liif", @"jsas\""u", @"odipikxlo", @"\""rnubsgwltqkbsu\""pcpcs", @"eitk--f--mhcqqoym--ji", @"vnedc", @"\""lhcaurdqzyjyu", @"haxzsa\""zcn\""y\""foclgtjfcnv\""m\x68krc", @"\""eoeggg\""tmiydvcay\""vfavc", @"snqvyqoncwxcvwbdktoywch", @"rnfgjsyr\xd5wacy", @"ik\""hebrpvsts", @"txw", @"\x15pxtdkogd\""urbm\""gevhh\""nxr\x3erxtk", @"cetqtcy", @"inleep--mgl", @"uflwbxvww\x2cxzezqnaply\""yh\""qlllzk", @"eepak\""xqtedzt", @"na\x61qzfieafvyrsnwkssznohjmc", @"yceaonylz\xc1--jrlbbkzwsidfi", @"ybqafngkcqpbp", @"\xaft", @"yidjpaobqydso", @"ju--ldxig--lrdrhjcmm\x77rc", @"tylacqeslnwj\x48ds\""tjxa", @"efbfm", @"--fxkgoprgdcjgyajykg--dtbrz", @"eujvva", @"h\x7acwfpikme--vwthyvrqdnx\""", @"rbpbrxm--\""\""\""voxx", @"ykiw\""tkb--lforu\""rsf--tf\""x\""rqti", @"e--wh\x77aqeugiq--ihhfqfuaij", @"g\""t--o", @"nxzo\""hf--xp", @"dxiaqfo\xea", @"kali--zczhiqkqzybjj\""fgdjnik", @"zdkgrqmdv", @"bimxim\xb6lrwsaj\""ui\""a", @"\""rrznitibgx--olpsjmjqzctxaubdifsq", @"zb\""khzixaacmhuzmlymoformipdzml", @"qfwi", @"hjwsxfpphttjy\""\""zixais\xbblgnqfto", @"puj--qmyu\""nqgaqfthbwjokbmrpbhpi", @"cyxdpkh--\""", @"q", @"m", @"tbxdzzllarlo", @"gbtys", @"gytilk--vlqxvcuutjunrqc", @"uugkvcuzan--eyhb", @"yaxr\""genlbgw\""--uc", @"nrgecjeip--sjdvgqaqxwsqactopu", @"pu\""r\""txpyrkfny--zmwfneyvwmnkkdipv", @"jm\xa3bhwvq", @"qxojmnml\""w\x9airr", @"xbzsuihs\x4dcedy\xaclrhgii--\""", @"drgjirusrekrwmvxllwdm", @"\x28hfxnfpycmpnkku\""csuf\xaarxlqyg\""x", @"\""zvz--rmg\""--sxxoifffyqfyn\""iq\""ps", @"\""z", @"zbwkmk\""sgzos\x93gtc\""", @"bvm\x28aa----\""pywuhaniox--z--hbp\xd7mold", @"aszgvsyna", @"qf\""vdwuss", @"lnohni\""qwiacjsjegstlbfq--kyjhyd", @"c--naawulxlqplnacvytspry\xf5ytxxqq", @"razwqmsqgbaaxcd--f", @"radggyrjrg\""zx", @"\""pu\x11t--ajcjuieinlkvya", @"veggiskh", @"eglfhjxiet\""kouqfskwsy\""hpthsldel", @"mv\xc1b\""f--shrssnjwcpmurepdxdlcj", @"dlayjd\""suvzotgdtc", @"\xa9pvxeopn", @"lpplsaxy\""oiwaq", @"hqwh--lusv", @"hykykwlx\""\xa5atkgh--d\x63dff", @"vfktanpjy\""xxetc", @"dnhwkgjnsmsswfuelvihvjl\""jtf", @"x\""dwvzra\""nbbsewftehczgbvfzd\""rau", @"csfi\""mzejnjqkqupwadrgti\""von", @"xckf\xf7xsm--pgvlpetjndpyblais--z", @"yecy\x6fuj\x58bwpgeuiw\""mdu", @"fgb", @"c--lx\x3efthet\xfdelgvwvpem", @"kgyrmarvfwjinlowt", @"yzte", @"vc\""z", @"sxevqfzmmdwsuu\""", @"fxbaercmcy\xb6md", @"f", @"m\x44gqbcppho--b", @"gtafr\x57m\x11jy\""\""erwmmpiwjkbckuw", @"ufdjt\""kssprzxqixzxmq\x58q", @"yzbyo\""lfdbyaxexyfbnyv--\xe8xmre", @"u\x43ntr----byyfjr\""iveujvnwsqbnpuvrta", @"us\xf6bai", @"c--edh", @"tzckolphexfq--\x23\xfbdqv--\""m", @"yjafhbvhhj\x1b\""bplb", @"\""o", @"rubahvmp\""", @"qmkukrnrmqumh", @"wdpxyvyidhwjf--nabbijwhr\xc5bksvy\""p", @"u\""prlpg\""", @"nsvcquyxbwilsxxemf\xd9leq", @"y\xcetxuafl", @"it", @"kwdlysf--xjpelae", @"viwh\x58wpjjlnvryuti\x2chngrx--nhtkui", @"vhn\x9ehre\xc3ncsqbozms\""nl", @"ytc\xa3mgeeogjcqavmmmd", @"xzlexlitseozoxtpzzutfq", @"cish\x07lmovj", @"ekbflwqzaiivdr\""pq--azrfbntqwkn", @"uc\""xdbegmlmhksofzohavtrnxf", @"xfdnrdqdrcjzbe", @"ndg\""ckgrpisib\""rg\""p--lmpfzlssnvk", @"witfjwpbyyzlop", @"zonlww\""emrbcsgdtrg\""rjzy\x64zqntlw", @"dvgb\""zn--vrbzema\""ckmd", @"--vdlmxhlvldk\""pmzazeip", @"\""\""r", @"rsntinv", @"iy", @"lr\x20efh", @"csgexlb\""zqdavlxxhtdbh\""\""\x0fkpvhiphm", @"ouwhp\""ogbft", @"cm--ckltng\""dw\x8brf\xf0eppgckd", @"zmnlsgalhpkejsizfsbtnfliu\""nhc", @"pnrkaayqvwpdjbhcrbb\""yfeq\""aq", @"ozh--hoxow\x2csrtr--r\""", @"bqxabj\""u--s", @"cpsjti\""gy", @"aa\""p--nki--ajijkqev", @"q\""\""lfdentjgd--", @"bmokvpoebutfki", @"pielvcbne\xf6efvzxn", @"kx", @"zlgmqagcrbhrwtwtmmg", @"aiyhmntcqjbpv\xb5hhswxbryoedvos", @"tdpaxrb", @"fu\""\x7dttkyvhrlwko", @"oirc--\""cqlnqffjqt--k", @"edxlia--tcyby", @"jpeybgwfayerfrfbvfog\""ol", @"ysr", @"bzwzilgwfugjk", @"tlcc\x75nukvwjgftetjcs\xaecwc", @"dsqssa\""vzrf\""sewbp--ahhlmhbeihlh", @"qtgmjck\""n\""guki\""gmdivwqxismqj", @"\""f", @"wuorvlovucngbzdszqpikyk", @"dfrdsacoukmgvhbq\""\""iwto", @"\""ey\""ch--wcgioe--\""ouvligmsw", @"ciqlszzgs", @"--tzyrkaoi\""sopjaq", @"lmtnv", @"ar\""fqoroigiertjjlm\""ymgi--kkjewsxd", @"wehcimlvudpxtamdn\""rwy", @"hr\""zvrwthr\""vruzqfrldn\""b", @"sggekodkiwvym\""mhsco", @"ltlkfbrrdvk--", @"uut\""sfjnz\""--ef", @"hxilg--", @"zsredsiwlzrpedibn", @"vtfi", @"--h", @"qekfrc\xf6wduodbwrguqcng--n", @"\""lljlfdrxftwidn--pkv\xd9ij", @"mrvgqynpehkliuijlpp", @"gikjph", @"yoxcdrdt\""wbaurnyhoyxoihu", @"onmomwuxuammbzxe", @"rnrr--twviz\x61gqaljr\x0dmtw", @"r\""vupaoi", @"l", @"sei", @"jwxtdtbkd--kxd", @"\x22v--", @"ahd", @"j\""bjqxs", @"--i\x24gglxub--nzsajokt", @"lviwpu\""uxdlh--zuy\""xqy\""ytdzlx\""r", @"kptfmys", @"fwxzikfhczkjwyjszqdbkepaeellc", @"nlqpsvbrbd--ns", @"qryuwkjiodw\""\""vaqyq\""dmyifm", @"tw\x15kdmaudjl--zorhp\""alwh", @"aatrvczesykekkjfyb\""kb", @"usqcutbqbxxhucwxo\xc1ltb\""j\""bghjcvws", @"ilhsrnzxkz", @"bianqfdfdhvw", @"hqibqs\x7ax\""qoxqoaqtcsz", @"htxtoojbbauztwxuiq--ngyfy--obzc", @"rxn--moxlj", @"mtus\x84erh\""dbe", @"asx\x50huvsitcxadt", @"\""bugggtnrc\""\""kl\""hmpu\x83hqrvhpo", @"ewisbp\""\""vuzf--w\x5fvalszdhl", @"scusplpwxfnxu\x57\""zynpn\x99xerc--ri", @"m--kinmkke\x0cl", @"xhuzit\x7fd", @"kfbo\x04\x50ruqirn", @"t\""\""xpbdscmdoug", @"punvpsgnbgyxe\""sptmpz", @"bxukkazijr", @"nxyrcdaoo\""rjkk\""wntehcvcip\""vrd", @"rdpvqskmihqaw", @"p--gwdhtqnpgthod", @"nwnuf\""\""yebycearom\""nqym\""\xd4sii\xccle", @"alda\""ptspo\""wkkv\""zoi\""hkb\""vnntyd", @"ixpgpfzbqv", @"znui\""--fzn\x03qozabh\""rva\""pv\x67", @"e\""zswmwuk", @"hcccygwfa", @"ngmace--rtyllolr\""\x68bw", @"--c\""jyufbry\""ryo\""xpo\x26ecninfeckh--s", @"hdnpngtuc\""dzbvvosn\x31fwtpzbrt", @"hesbpd\xd4", @"dsdbstuzrdfmrnyntufs\""dmv", @"d\xeeibcwhcvkt", @"fvzwrsfjdqdmy\""\""v", @"ns\""dqafz--lkyoflnazv\""mn\x37\""o\""yj\""e", @"dypilgbwzccayxa\""bnmuernx", @"q\xa9ztqrhreb\""\""kxfeyodqb", @"iz\xa5qjxqulaawuwz\""rqmpcj--yel", @"z\""--pq\""\""y\x67zpjtn", @"ifxqvivp\""kiiftdoe", @"jxzebj\""\x35\""qr\""ecglcutuoyywqumcs\""kk", @"q", @"yob\x85qmpuwexptczbkrl", @"cjiavv\""uudpozvibyycnmxhxpxmpjoz", @"xro--uiqyrcid", @"nod--k", @"d\""neiec", @"tqyrqvwyvmz--pzgzzcqsqsrgbqbtapoz", @"r\""xvocpeuxfxslgueb\x05kzyyie\""aoec", @"\""du--uirlhcbgv--cjqhfreqnvn", @"zp\x04\x15\""pbjwhrjtmiba", @"--cv\""", @"k\""rwnb--hiu\""rqd\""rc--nyakrhly", @"klrmafjzandiddodgz", @"xipzhqzhvlpykzcuppx", @"zdvrvn\xd0mtfvpylbn----sxcznrzugwznl", @"ody--pvm\""kpjiudzhxazirgxzvumeat\""o", @"kllvhdp\""prjikzrrc\""adgpegc--\""gk", @"sqtpug\xbcaauxaamw", @"wegxxrrxdvpivrqievfeokmnojsk", @"--bo", @"gijhz", @"ylowluvabwrigssdgtxdwsiorxev\xdd", @"\""", @"ghnsrnsqtxpygikahkrl", @"\""rcfqkbjf\""sgxg\""vnd--rotn", @"ap\""smgsuexjrbuqs\""mpbstogj\""x", @"koaunz--sgt\""opv", @"yialiuzwix", @"yp\""ndxgwzml\""bt", @"lpcjxmggfsy--szbxccarjkqzasqkb\xcfd\x0c", @"x", @"mgakc", @"vjieunoh\x73fjwx", @"erbvv\""qulsd", @"mimycrbfhqkarmz", @"tihfbgcszuej\""c\xfbvoqskkhbgpaddioo", @"mziavkwrmekriqghw", @"izk--tnjd--ed--emokvjoc", @"c\""nhbqzndro--g", @"usfngdo", @"aypljdftvptt", @"ym\""afvq\xbcc", @"zabi\""wjpvugwhl", @"ebvptcjqjhc\""n\""p\""dxrphegr--", @"mzlqqxokhye\xd9--rffhnzs", @"hnipqknwpsjakanuewe", @"rqgbfcjdrmiz\""h", @"kzzp--z--txmkwaouxictybwx", @"yzmspjkqrteiydswlvb", @"gjpxklgpzv\""txri--hotpuiukzzzd", @"p\""rxergtbsxmjmkeeqwvoagnki\""", @"santipvuiq", @"\""ihjqlhtwbuy\""hdkiv\""mtiqacnf--", @"oliaggtqyyx", @"fwwnpmbb", @"yrtdrieazfxyyneo", @"nywbv--", @"twc--ehfqxhgomgrgwpxyzmnkioj", @"qludrkkvljljd--xvdeum\x4e"
		};

		private readonly List<string> input9 = new List<string>()
		{
			"AlphaCentauri to Snowdin = 66", "AlphaCentauri to Tambi = 28", "AlphaCentauri to Faerun = 60", "AlphaCentauri to Norrath = 34", "AlphaCentauri to Straylight = 34", "AlphaCentauri to Tristram = 3", "AlphaCentauri to Arbre = 108", "Snowdin to Tambi = 22", "Snowdin to Faerun = 12", "Snowdin to Norrath = 91", "Snowdin to Straylight = 121", "Snowdin to Tristram = 111", "Snowdin to Arbre = 71", "Tambi to Faerun = 39", "Tambi to Norrath = 113", "Tambi to Straylight = 130", "Tambi to Tristram = 35", "Tambi to Arbre = 40", "Faerun to Norrath = 63", "Faerun to Straylight = 21", "Faerun to Tristram = 57", "Faerun to Arbre = 83", "Norrath to Straylight = 9", "Norrath to Tristram = 50", "Norrath to Arbre = 60", "Straylight to Tristram = 27", "Straylight to Arbre = 81", "Tristram to Arbre = 90"
		};

		private readonly string input10 = "3113322113";

		private readonly string input11 = "hxbxwxba";

		private readonly List<string> input12 = new List<string>() {
			"Alice would lose 57 happiness units by sitting next to Bob", "Alice would lose 62 happiness units by sitting next to Carol", "Alice would lose 75 happiness units by sitting next to David", "Alice would gain 71 happiness units by sitting next to Eric", "Alice would lose 22 happiness units by sitting next to Frank", "Alice would lose 23 happiness units by sitting next to George", "Alice would lose 76 happiness units by sitting next to Mallory", "Bob would lose 14 happiness units by sitting next to Alice", "Bob would gain 48 happiness units by sitting next to Carol", "Bob would gain 89 happiness units by sitting next to David", "Bob would gain 86 happiness units by sitting next to Eric", "Bob would lose 2 happiness units by sitting next to Frank", "Bob would gain 27 happiness units by sitting next to George", "Bob would gain 19 happiness units by sitting next to Mallory", "Carol would gain 37 happiness units by sitting next to Alice", "Carol would gain 45 happiness units by sitting next to Bob", "Carol would gain 24 happiness units by sitting next to David", "Carol would gain 5 happiness units by sitting next to Eric", "Carol would lose 68 happiness units by sitting next to Frank", "Carol would lose 25 happiness units by sitting next to George", "Carol would gain 30 happiness units by sitting next to Mallory", "David would lose 51 happiness units by sitting next to Alice", "David would gain 34 happiness units by sitting next to Bob", "David would gain 99 happiness units by sitting next to Carol", "David would gain 91 happiness units by sitting next to Eric", "David would lose 38 happiness units by sitting next to Frank", "David would gain 60 happiness units by sitting next to George", "David would lose 63 happiness units by sitting next to Mallory", "Eric would gain 23 happiness units by sitting next to Alice", "Eric would lose 69 happiness units by sitting next to Bob", "Eric would lose 33 happiness units by sitting next to Carol", "Eric would lose 47 happiness units by sitting next to David", "Eric would gain 75 happiness units by sitting next to Frank", "Eric would gain 82 happiness units by sitting next to George", "Eric would gain 13 happiness units by sitting next to Mallory", "Frank would gain 77 happiness units by sitting next to Alice", "Frank would gain 27 happiness units by sitting next to Bob", "Frank would lose 87 happiness units by sitting next to Carol", "Frank would gain 74 happiness units by sitting next to David", "Frank would lose 41 happiness units by sitting next to Eric", "Frank would lose 99 happiness units by sitting next to George", "Frank would gain 26 happiness units by sitting next to Mallory", "George would lose 63 happiness units by sitting next to Alice", "George would lose 51 happiness units by sitting next to Bob", "George would lose 60 happiness units by sitting next to Carol", "George would gain 30 happiness units by sitting next to David", "George would lose 100 happiness units by sitting next to Eric", "George would lose 63 happiness units by sitting next to Frank", "George would gain 57 happiness units by sitting next to Mallory", "Mallory would lose 71 happiness units by sitting next to Alice", "Mallory would lose 28 happiness units by sitting next to Bob", "Mallory would lose 10 happiness units by sitting next to Carol", "Mallory would gain 44 happiness units by sitting next to David", "Mallory would gain 22 happiness units by sitting next to Eric", "Mallory would gain 79 happiness units by sitting next to Frank", "Mallory would lose 16 happiness units by sitting next to George"
		};
		
		private readonly List<string> input14 = new List<string>() {
			"Dancer can fly 27 km/s for 5 seconds, but then must rest for 132 seconds", "Cupid can fly 22 km/s for 2 seconds, but then must rest for 41 seconds", "Rudolph can fly 11 km/s for 5 seconds, but then must rest for 48 seconds", "Donner can fly 28 km/s for 5 seconds, but then must rest for 134 seconds", "Dasher can fly 4 km/s for 16 seconds, but then must rest for 55 seconds", "Blitzen can fly 14 km/s for 3 seconds, but then must rest for 38 seconds", "Prancer can fly 3 km/s for 21 seconds, but then must rest for 40 seconds", "Comet can fly 18 km/s for 6 seconds, but then must rest for 103 seconds", "Vixen can fly 18 km/s for 5 seconds, but then must rest for 84 seconds"
		}; 
		
		private readonly List<string> input15 = new List<string>() {
			"Sprinkles: capacity 5, durability -1, flavor 0, texture 0, calories 5", "PeanutButter: capacity -1, durability 3, flavor 0, texture 0, calories 1", "Frosting: capacity 0, durability -1, flavor 4, texture 0, calories 6", "Sugar: capacity -1, durability 0, flavor 0, texture 2, calories 8"
		};

		private readonly List<string> input16 = new List<string>() {
			"1 cars 9 akitas 3 goldfish 0", "2 akitas 9 children 3 samoyeds 9", "3 trees 6 cars 6 children 4", "4 trees 4 vizslas 4 goldfish 9", "5 akitas 9 vizslas 7 cars 5", "6 vizslas 6 goldfish 6 akitas 3", "7 pomeranians 5 samoyeds 0 perfumes 10", "8 cars 10 pomeranians 7 goldfish 8", "9 trees 2 vizslas 7 samoyeds 6", "10 perfumes 5 pomeranians 4 children 9", "11 vizslas 5 perfumes 8 cars 10", "12 children 10 cars 6 perfumes 5", "13 cats 4 samoyeds 7 pomeranians 8", "14 perfumes 6 goldfish 10 children 7", "15 perfumes 4 pomeranians 3 cars 6", "16 perfumes 7 cars 9 pomeranians 6", "17 goldfish 3 cars 6 vizslas 7", "18 perfumes 6 cars 7 goldfish 3", "19 trees 0 akitas 3 pomeranians 8", "20 goldfish 6 trees 2 akitas 6", "21 pomeranians 9 akitas 9 samoyeds 9", "22 vizslas 2 cars 9 perfumes 5", "23 goldfish 10 samoyeds 8 children 9", "24 akitas 4 goldfish 1 vizslas 5", "25 goldfish 10 trees 8 perfumes 6", "26 vizslas 5 akitas 8 trees 1", "27 trees 3 cars 6 perfumes 2", "28 goldfish 8 trees 7 akitas 10", "29 children 5 trees 1 goldfish 10", "30 vizslas 3 perfumes 8 akitas 3", "31 cars 6 children 10 perfumes 7", "32 cars 10 perfumes 3 goldfish 10", "33 perfumes 9 vizslas 3 akitas 4", "34 perfumes 10 vizslas 7 children 8", "35 cars 5 perfumes 5 vizslas 9", "36 trees 9 cars 9 akitas 7", "37 samoyeds 9 perfumes 2 cars 10", "38 akitas 7 cars 5 trees 5", "39 goldfish 8 trees 9 cars 10", "40 trees 0 cats 1 pomeranians 1", "41 pomeranians 6 perfumes 9 samoyeds 1", "42 vizslas 6 akitas 3 pomeranians 1", "43 vizslas 2 perfumes 3 pomeranians 6", "44 akitas 5 pomeranians 0 vizslas 10", "45 vizslas 4 goldfish 1 cars 5", "46 cars 4 vizslas 8 cats 0", "47 cats 5 children 8 pomeranians 2", "48 vizslas 3 perfumes 6 cats 0", "49 akitas 7 perfumes 0 trees 7", "50 trees 4 akitas 10 vizslas 2", "51 goldfish 10 cars 9 trees 4", "52 cars 5 children 9 perfumes 0", "53 vizslas 5 cars 3 cats 8", "54 cars 5 akitas 1 goldfish 10", "55 akitas 10 vizslas 2 cars 6", "56 cats 6 trees 0 cars 4", "57 vizslas 1 akitas 1 samoyeds 7", "58 samoyeds 6 vizslas 1 akitas 7", "59 akitas 9 cars 8 vizslas 1", "60 cars 6 vizslas 7 goldfish 0", "61 pomeranians 5 akitas 6 vizslas 2", "62 samoyeds 2 cats 8 goldfish 7", "63 vizslas 10 goldfish 7 samoyeds 9", "64 perfumes 2 trees 1 akitas 6", "65 cars 8 perfumes 10 vizslas 9", "66 akitas 8 vizslas 8 perfumes 8", "67 goldfish 7 cars 9 samoyeds 9", "68 perfumes 2 children 7 akitas 1", "69 perfumes 7 vizslas 9 akitas 1", "70 samoyeds 3 vizslas 1 trees 1", "71 vizslas 8 goldfish 7 trees 9", "72 goldfish 8 cars 6 trees 9", "73 perfumes 5 cars 10 samoyeds 7", "74 pomeranians 4 perfumes 3 cars 5", "75 samoyeds 1 perfumes 1 pomeranians 1", "76 goldfish 4 cats 6 akitas 7", "77 perfumes 5 akitas 4 vizslas 8", "78 perfumes 4 cats 3 children 4", "79 vizslas 5 pomeranians 9 samoyeds 7", "80 cars 3 samoyeds 5 pomeranians 7", "81 vizslas 2 samoyeds 4 perfumes 2", "82 trees 1 akitas 10 vizslas 9", "83 vizslas 0 akitas 2 samoyeds 5", "84 perfumes 5 vizslas 7 children 8", "85 cats 3 children 2 trees 0", "86 cars 3 perfumes 2 goldfish 2", "87 trees 1 akitas 7 vizslas 0", "88 trees 1 akitas 2 samoyeds 1", "89 cars 4 vizslas 8 akitas 1", "90 perfumes 5 cats 3 vizslas 0", "91 samoyeds 7 cats 6 goldfish 8", "92 samoyeds 10 cats 0 cars 7", "93 cars 6 akitas 7 samoyeds 2", "94 perfumes 0 goldfish 6 trees 9", "95 cars 6 pomeranians 2 samoyeds 8", "96 cars 2 trees 9 samoyeds 4", "97 goldfish 5 trees 1 children 0", "98 akitas 9 goldfish 7 children 6", "99 goldfish 9 akitas 0 pomeranians 0", "100 samoyeds 6 children 8 vizslas 5", "101 vizslas 6 cars 5 goldfish 4", "102 vizslas 6 akitas 2 perfumes 6", "103 samoyeds 3 akitas 7 children 4", "104 cars 3 perfumes 10 cats 6", "105 vizslas 9 pomeranians 0 cars 1", "106 cats 6 samoyeds 8 pomeranians 5", "107 cars 7 trees 4 akitas 10", "108 perfumes 3 vizslas 1 goldfish 9", "109 trees 6 cars 8 goldfish 5", "110 pomeranians 2 children 1 vizslas 7", "111 akitas 0 vizslas 8 cars 0", "112 goldfish 3 vizslas 6 akitas 2", "113 akitas 10 pomeranians 7 perfumes 7", "114 cars 10 cats 2 vizslas 8", "115 akitas 8 trees 1 vizslas 2", "116 vizslas 2 akitas 7 perfumes 1", "117 goldfish 0 vizslas 10 trees 9", "118 trees 3 cars 0 goldfish 0", "119 perfumes 7 goldfish 5 trees 9", "120 children 9 vizslas 3 trees 5", "121 vizslas 1 goldfish 7 akitas 10", "122 perfumes 1 cars 6 trees 1", "123 akitas 2 vizslas 0 goldfish 7", "124 vizslas 10 pomeranians 7 akitas 0", "125 perfumes 4 cats 5 vizslas 2", "126 cars 6 samoyeds 8 akitas 3", "127 trees 9 goldfish 7 akitas 9", "128 cars 8 trees 0 perfumes 2", "129 pomeranians 7 vizslas 2 perfumes 6", "130 vizslas 9 pomeranians 3 trees 6", "131 vizslas 7 cars 9 perfumes 1", "132 akitas 2 pomeranians 9 vizslas 7", "133 trees 9 pomeranians 10 samoyeds 0", "134 children 4 akitas 10 perfumes 4", "135 vizslas 1 cats 1 trees 8", "136 samoyeds 7 cars 8 goldfish 5", "137 perfumes 0 children 1 pomeranians 10", "138 vizslas 4 perfumes 5 cars 5", "139 trees 2 perfumes 8 goldfish 0", "140 cars 10 akitas 5 goldfish 7", "141 children 4 trees 3 goldfish 8", "142 cars 8 perfumes 6 trees 7", "143 akitas 6 goldfish 0 trees 10", "144 akitas 7 pomeranians 10 perfumes 10", "145 trees 10 vizslas 3 goldfish 4", "146 samoyeds 4 akitas 3 perfumes 6", "147 akitas 8 perfumes 2 pomeranians 10", "148 cars 2 perfumes 0 goldfish 8", "149 goldfish 6 akitas 7 perfumes 6", "150 cars 2 pomeranians 5 perfumes 4", "151 goldfish 1 cars 5 trees 0", "152 pomeranians 4 cars 7 children 1", "153 goldfish 8 cars 1 children 10", "154 cars 6 perfumes 8 trees 1", "155 akitas 4 perfumes 6 pomeranians 2", "156 pomeranians 5 cars 4 akitas 1", "157 cats 5 cars 9 goldfish 8", "158 vizslas 5 samoyeds 1 children 7", "159 vizslas 1 perfumes 3 akitas 1", "160 goldfish 10 pomeranians 9 perfumes 5", "161 samoyeds 3 trees 7 cars 2", "162 cars 2 pomeranians 1 vizslas 6", "163 vizslas 3 perfumes 5 akitas 6", "164 vizslas 1 trees 0 akitas 5", "165 vizslas 5 cars 6 pomeranians 8", "166 cars 10 perfumes 2 trees 9", "167 cars 10 pomeranians 6 perfumes 4", "168 akitas 7 trees 10 goldfish 7", "169 akitas 1 perfumes 10 cars 10", "170 akitas 5 samoyeds 8 vizslas 6", "171 children 3 akitas 2 vizslas 3", "172 goldfish 5 vizslas 5 perfumes 9", "173 perfumes 5 goldfish 10 trees 5", "174 akitas 5 vizslas 2 children 7", "175 perfumes 5 cars 7 samoyeds 2", "176 cars 8 vizslas 10 akitas 7", "177 perfumes 7 children 8 goldfish 7", "178 cars 1 pomeranians 9 samoyeds 0", "179 perfumes 6 cars 2 trees 6", "180 trees 3 vizslas 7 children 3", "181 vizslas 8 samoyeds 2 trees 9", "182 perfumes 3 cats 1 children 5", "183 akitas 9 cats 6 children 3", "184 pomeranians 9 cars 6 perfumes 8", "185 vizslas 9 trees 0 akitas 9", "186 perfumes 6 cars 5 goldfish 5", "187 perfumes 4 cats 7 vizslas 2", "188 akitas 7 cars 4 children 10", "189 akitas 0 goldfish 7 vizslas 5", "190 akitas 5 cars 5 cats 6", "191 cars 6 children 0 perfumes 3", "192 cats 2 perfumes 10 goldfish 7", "193 trees 1 perfumes 0 cars 8", "194 perfumes 9 children 4 cats 6", "195 akitas 7 trees 3 goldfish 6", "196 goldfish 8 cars 8 samoyeds 0", "197 cats 0 akitas 10 vizslas 0", "198 goldfish 1 perfumes 3 cars 8", "199 akitas 10 vizslas 5 samoyeds 6", "200 pomeranians 9 goldfish 9 samoyeds 7", "201 samoyeds 0 goldfish 7 akitas 6", "202 vizslas 0 goldfish 2 akitas 1", "203 goldfish 3 children 0 vizslas 8", "204 cars 8 trees 2 perfumes 2", "205 cars 4 perfumes 5 goldfish 8", "206 vizslas 3 trees 2 akitas 1", "207 cars 7 goldfish 5 trees 1", "208 goldfish 1 cars 6 vizslas 8", "209 cats 4 trees 1 children 0", "210 cats 10 children 0 perfumes 0", "211 cars 4 pomeranians 7 samoyeds 5", "212 cars 2 pomeranians 10 trees 1", "213 trees 10 cats 5 cars 10", "214 perfumes 5 trees 1 vizslas 1", "215 akitas 10 vizslas 8 samoyeds 8", "216 vizslas 2 cats 5 pomeranians 3", "217 akitas 10 perfumes 0 cats 10", "218 trees 8 cats 5 vizslas 2", "219 goldfish 10 perfumes 8 children 2", "220 samoyeds 9 trees 8 vizslas 7", "221 children 7 trees 6 cars 6", "222 cats 4 akitas 5 pomeranians 0", "223 trees 8 goldfish 2 perfumes 8", "224 pomeranians 9 cars 8 akitas 5", "225 akitas 10 vizslas 0 trees 2", "226 akitas 8 cats 6 cars 7", "227 trees 1 akitas 3 goldfish 4", "228 pomeranians 6 cats 3 goldfish 3", "229 trees 10 perfumes 3 vizslas 7", "230 perfumes 8 cars 7 akitas 0", "231 perfumes 10 goldfish 4 cars 6", "232 goldfish 7 trees 3 cats 2", "233 perfumes 6 trees 4 akitas 4", "234 goldfish 9 cats 4 cars 7", "235 pomeranians 6 vizslas 0 akitas 6", "236 samoyeds 5 cars 5 children 4", "237 vizslas 10 cars 4 goldfish 4", "238 goldfish 3 samoyeds 7 akitas 2", "239 cats 8 children 2 vizslas 7", "240 cars 9 perfumes 4 trees 9", "241 trees 8 vizslas 2 goldfish 5", "242 cars 6 trees 3 vizslas 3", "243 cats 6 children 7 cars 4", "244 cats 10 perfumes 2 goldfish 7", "245 akitas 8 cats 10 perfumes 8", "246 vizslas 8 akitas 5 perfumes 10", "247 goldfish 2 vizslas 5 akitas 7", "248 akitas 3 perfumes 0 trees 10", "249 cats 4 vizslas 5 pomeranians 6", "250 children 3 vizslas 7 perfumes 2", "251 cars 0 pomeranians 10 perfumes 0", "252 akitas 0 goldfish 9 cars 6", "253 perfumes 7 cars 4 samoyeds 5", "254 akitas 9 trees 10 cars 4", "255 samoyeds 10 children 6 akitas 7", "256 trees 8 goldfish 8 perfumes 8", "257 goldfish 3 akitas 2 perfumes 6", "258 cats 7 trees 0 vizslas 1", "259 perfumes 7 cars 7 akitas 7", "260 goldfish 0 vizslas 0 samoyeds 2", "261 vizslas 2 children 2 cats 3", "262 vizslas 2 pomeranians 9 samoyeds 3", "263 cats 1 akitas 3 vizslas 1", "264 pomeranians 10 trees 2 goldfish 7", "265 samoyeds 5 trees 7 perfumes 4", "266 perfumes 10 cars 1 pomeranians 3", "267 trees 6 goldfish 1 cars 0", "268 cars 6 samoyeds 4 pomeranians 5", "269 goldfish 3 vizslas 3 akitas 3", "270 children 5 cats 0 cars 4", "271 goldfish 3 perfumes 8 pomeranians 7", "272 samoyeds 6 cars 7 perfumes 10", "273 trees 4 cars 2 vizslas 7", "274 samoyeds 10 perfumes 9 goldfish 6", "275 cars 4 trees 2 perfumes 7", "276 akitas 3 perfumes 9 cars 9", "277 akitas 8 vizslas 2 cats 6", "278 trees 5 goldfish 7 akitas 3", "279 perfumes 9 cars 8 vizslas 2", "280 trees 3 vizslas 0 children 0", "281 cars 7 trees 2 cats 5", "282 vizslas 4 cars 10 cats 3", "283 akitas 10 cats 3 samoyeds 9", "284 trees 7 children 5 goldfish 6", "285 cars 2 perfumes 5 cats 7", "286 samoyeds 5 trees 10 goldfish 6", "287 goldfish 10 perfumes 4 trees 7", "288 vizslas 9 trees 9 perfumes 0", "289 trees 4 goldfish 9 vizslas 8", "290 vizslas 3 cars 3 trees 2", "291 goldfish 2 akitas 2 trees 2", "292 children 1 cars 0 vizslas 5", "293 trees 5 akitas 4 goldfish 6", "294 akitas 3 vizslas 7 pomeranians 5", "295 goldfish 10 vizslas 3 trees 1", "296 cars 2 trees 1 akitas 0", "297 akitas 10 vizslas 6 samoyeds 2", "298 children 5 trees 1 samoyeds 9", "299 perfumes 9 trees 6 vizslas 1", "300 akitas 7 pomeranians 6 vizslas 6", "301 cats 7 children 6 vizslas 7", "302 trees 2 vizslas 7 samoyeds 4", "303 goldfish 0 samoyeds 10 cars 4", "304 pomeranians 9 children 3 vizslas 5", "305 akitas 8 vizslas 4 cars 5", "306 akitas 0 perfumes 2 pomeranians 10", "307 akitas 9 cars 0 trees 2", "308 vizslas 10 goldfish 8 akitas 6", "309 trees 0 cats 6 perfumes 2", "310 vizslas 10 cars 1 trees 4", "311 goldfish 8 perfumes 6 cats 3", "312 goldfish 0 children 1 akitas 2", "313 pomeranians 10 trees 6 samoyeds 6", "314 vizslas 5 akitas 4 pomeranians 2", "315 goldfish 7 trees 0 akitas 5", "316 goldfish 4 vizslas 5 cars 7", "317 perfumes 7 cats 10 cars 4", "318 samoyeds 10 cars 9 trees 7", "319 pomeranians 8 vizslas 6 cars 3", "320 cars 4 cats 9 akitas 4", "321 cars 6 trees 2 perfumes 6", "322 goldfish 1 cats 2 perfumes 4", "323 akitas 6 cats 5 cars 8", "324 cats 4 vizslas 9 akitas 0", "325 children 8 samoyeds 9 trees 4", "326 vizslas 2 samoyeds 10 perfumes 7", "327 goldfish 7 pomeranians 4 akitas 10", "328 perfumes 8 cats 4 akitas 10", "329 trees 0 cars 9 goldfish 3", "330 trees 5 samoyeds 7 perfumes 8", "331 cars 4 perfumes 2 goldfish 0", "332 vizslas 4 pomeranians 7 akitas 1", "333 akitas 4 goldfish 3 perfumes 0", "334 samoyeds 3 akitas 10 vizslas 0", "335 goldfish 1 akitas 7 vizslas 6", "336 perfumes 1 goldfish 1 pomeranians 8", "337 children 5 cars 4 cats 4", "338 vizslas 5 cars 10 cats 3", "339 trees 2 goldfish 3 cars 1", "340 trees 10 goldfish 6 perfumes 2", "341 akitas 5 trees 6 cats 3", "342 cars 10 children 8 goldfish 0", "343 cats 2 akitas 0 pomeranians 4", "344 perfumes 1 vizslas 3 cars 3", "345 samoyeds 8 cats 5 perfumes 8", "346 cars 5 akitas 10 trees 2", "347 vizslas 9 akitas 9 cars 3", "348 cars 3 perfumes 1 pomeranians 9", "349 akitas 1 cars 4 perfumes 0", "350 perfumes 8 vizslas 2 trees 6", "351 pomeranians 5 akitas 9 cats 8", "352 pomeranians 8 vizslas 3 goldfish 10", "353 trees 2 pomeranians 0 goldfish 6", "354 cats 5 akitas 7 goldfish 6", "355 goldfish 6 children 4 trees 10", "356 children 1 trees 3 akitas 7", "357 trees 2 samoyeds 10 goldfish 3", "358 samoyeds 10 cats 0 goldfish 0", "359 perfumes 3 children 6 pomeranians 1", "360 cars 10 pomeranians 1 samoyeds 5", "361 samoyeds 9 pomeranians 7 perfumes 6", "362 goldfish 6 trees 8 perfumes 9", "363 samoyeds 10 pomeranians 9 children 10", "364 perfumes 3 goldfish 7 cars 9", "365 cats 3 children 4 samoyeds 8", "366 trees 0 cars 10 vizslas 10", "367 pomeranians 10 children 8 perfumes 2", "368 cars 5 vizslas 0 samoyeds 3", "369 trees 1 goldfish 8 cars 8", "370 vizslas 0 cars 2 perfumes 5", "371 trees 2 cars 3 vizslas 8", "372 trees 10 children 9 cats 1", "373 pomeranians 3 perfumes 1 vizslas 0", "374 vizslas 0 perfumes 6 trees 0", "375 vizslas 7 pomeranians 1 akitas 10", "376 vizslas 8 trees 2 cars 10", "377 perfumes 9 cats 5 goldfish 5", "378 cats 0 akitas 10 perfumes 9", "379 cars 4 akitas 1 trees 1", "380 cars 4 perfumes 5 trees 3", "381 goldfish 3 akitas 5 samoyeds 9", "382 goldfish 7 perfumes 5 trees 5", "383 akitas 4 cats 6 cars 8", "384 children 6 goldfish 10 akitas 7", "385 akitas 7 vizslas 5 perfumes 10", "386 children 7 vizslas 10 akitas 10", "387 goldfish 6 akitas 7 trees 2", "388 vizslas 6 trees 1 akitas 2", "389 cars 5 vizslas 3 akitas 7", "390 vizslas 4 cats 8 perfumes 7", "391 akitas 3 trees 0 children 2", "392 cats 7 cars 3 children 9", "393 trees 10 vizslas 3 goldfish 7", "394 perfumes 0 goldfish 7 akitas 4", "395 cats 6 cars 7 vizslas 0", "396 vizslas 4 perfumes 6 goldfish 5", "397 pomeranians 8 trees 1 akitas 9", "398 goldfish 7 pomeranians 6 samoyeds 9", "399 perfumes 10 cars 1 trees 8", "400 trees 0 goldfish 9 children 6", "401 trees 1 cars 6 pomeranians 8", "402 perfumes 9 cars 0 vizslas 10", "403 samoyeds 4 akitas 1 vizslas 9", "404 perfumes 0 trees 2 cars 4", "405 akitas 0 perfumes 5 samoyeds 4", "406 akitas 8 vizslas 6 children 2", "407 children 1 trees 8 goldfish 10", "408 pomeranians 4 trees 10 cars 9", "409 perfumes 5 vizslas 5 akitas 4", "410 trees 1 akitas 10 vizslas 6", "411 samoyeds 0 goldfish 9 perfumes 7", "412 goldfish 7 samoyeds 10 trees 1", "413 samoyeds 0 pomeranians 10 vizslas 6", "414 children 2 cars 10 samoyeds 2", "415 trees 2 goldfish 8 cars 0", "416 samoyeds 4 goldfish 9 trees 2", "417 trees 8 akitas 10 perfumes 3", "418 samoyeds 9 goldfish 2 cars 1", "419 akitas 2 perfumes 8 trees 2", "420 children 3 goldfish 6 perfumes 5", "421 akitas 8 perfumes 2 samoyeds 6", "422 vizslas 10 akitas 4 pomeranians 3", "423 cats 8 perfumes 3 trees 4", "424 cars 2 children 4 pomeranians 8", "425 pomeranians 4 samoyeds 2 goldfish 4", "426 perfumes 6 cars 4 goldfish 4", "427 akitas 0 goldfish 7 perfumes 5", "428 perfumes 4 cars 3 akitas 5", "429 trees 0 vizslas 0 goldfish 1", "430 perfumes 4 vizslas 2 cars 7", "431 goldfish 7 pomeranians 8 trees 0", "432 goldfish 7 children 9 trees 3", "433 akitas 1 vizslas 10 trees 2", "434 perfumes 2 cars 4 goldfish 10", "435 pomeranians 6 vizslas 9 trees 1", "436 cars 9 trees 0 goldfish 0", "437 trees 1 goldfish 1 vizslas 8", "438 goldfish 7 samoyeds 8 children 2", "439 children 1 cats 7 vizslas 8", "440 cats 2 pomeranians 6 goldfish 4", "441 perfumes 7 cats 3 vizslas 6", "442 akitas 4 samoyeds 5 cars 2", "443 akitas 3 perfumes 3 cats 9", "444 perfumes 10 akitas 6 trees 0", "445 cars 5 children 9 perfumes 8", "446 vizslas 10 cars 3 perfumes 5", "447 children 9 perfumes 1 cars 10", "448 akitas 0 goldfish 8 trees 3", "449 cars 7 akitas 8 children 3", "450 cars 4 akitas 9 cats 0", "451 perfumes 4 samoyeds 5 goldfish 6", "452 perfumes 10 akitas 1 cars 7", "453 trees 1 goldfish 3 vizslas 6", "454 goldfish 8 pomeranians 6 trees 10", "455 akitas 5 vizslas 8 goldfish 10", "456 cats 5 trees 4 samoyeds 0", "457 perfumes 8 cars 0 cats 3", "458 akitas 1 trees 10 vizslas 2", "459 vizslas 6 akitas 3 children 10", "460 perfumes 7 trees 9 goldfish 8", "461 children 6 vizslas 4 perfumes 5", "462 vizslas 6 akitas 8 perfumes 9", "463 goldfish 8 cars 4 trees 10", "464 pomeranians 8 cars 5 vizslas 0", "465 cats 10 goldfish 7 akitas 1", "466 cats 2 children 1 cars 6", "467 perfumes 3 samoyeds 6 cars 0", "468 samoyeds 10 pomeranians 6 trees 2", "469 children 2 perfumes 2 pomeranians 4", "470 cats 1 perfumes 5 vizslas 9", "471 vizslas 5 perfumes 2 akitas 7", "472 samoyeds 8 goldfish 6 cats 1", "473 goldfish 10 perfumes 9 cars 4", "474 samoyeds 0 cars 4 vizslas 4", "475 trees 2 cars 7 akitas 8", "476 vizslas 3 perfumes 5 goldfish 1", "477 cats 7 cars 4 trees 1", "478 vizslas 8 akitas 3 goldfish 0", "479 cars 6 cats 3 perfumes 2", "480 goldfish 1 children 9 vizslas 3", "481 pomeranians 5 vizslas 1 cars 10", "482 children 5 perfumes 5 cats 1", "483 perfumes 2 goldfish 7 trees 6", "484 akitas 2 goldfish 4 perfumes 10", "485 samoyeds 3 goldfish 0 akitas 1", "486 trees 8 vizslas 9 goldfish 0", "487 goldfish 8 samoyeds 0 trees 0", "488 perfumes 7 cars 5 trees 0", "489 vizslas 3 pomeranians 2 perfumes 5", "490 cars 5 perfumes 5 akitas 5", "491 children 8 trees 1 pomeranians 4", "492 pomeranians 0 akitas 1 vizslas 8", "493 akitas 10 perfumes 10 samoyeds 8", "494 perfumes 6 vizslas 4 cats 6", "495 children 6 pomeranians 5 samoyeds 4", "496 vizslas 1 trees 5 akitas 1", "497 vizslas 10 perfumes 10 pomeranians 3", "498 samoyeds 3 trees 2 cars 5", "499 cats 6 children 3 perfumes 0", "500 pomeranians 10 cats 3 vizslas 5"
		};

		private readonly List<int> input17 = new List<int>() {
			50, 44, 11, 49, 42, 46, 18, 32, 26, 40, 21, 7, 18, 43, 10, 47, 36, 24, 22, 40
		};

		public Advent2015()
		{
			Console.WriteLine("1.1: " + DayOne_1(input1));
			Console.WriteLine("1.2: " + DayOne_2(input1));
			Console.WriteLine("2.1: " + DayTwo_1(input2));
			Console.WriteLine("2.2: " + DayTwo_2(input2));
			Console.WriteLine("3.1: " + DayThree_1(input3));
			Console.WriteLine("3.2: " + DayThree_2(input3));
			//Console.WriteLine("4.1: " + DayFour_1(input4));
			//Console.WriteLine("4.2: " + DayFour_2(input4));
			Console.WriteLine("5.1: " + DayFive_1(input5));
			Console.WriteLine("5.2: " + DayFive_2(input5));
			Console.WriteLine("6.1: " + DaySix_1(input6));
			Console.WriteLine("6.2: " + DaySix_2(input6));
			//Console.WriteLine("8.1: " + DayEight_1(input8));
			Console.WriteLine("9.1: " + DayNine_1(input9));
			Console.WriteLine("9.2: " + DayNine_2(input9));
			Console.WriteLine("10.1: " + DayTen_1(input10));
			Console.WriteLine("10.2: " + DayTen_2(input10));
			Console.WriteLine("11.1: " + DayEleven_1(input11));
			Console.WriteLine("11.2: " + DayEleven_2(input11));
			Console.WriteLine("12.1: " + DayTwelve_1(input12));
			Console.WriteLine("12.2: " + DayTwelve_2(input12));
			Console.WriteLine("14.1: " + DayFourteen_1(input14));
			Console.WriteLine("14.2: " + DayFourteen_2(input14));
			Console.WriteLine("15.1: " + DayFifteen_1(input15));
			Console.WriteLine("15.2: " + DayFifteen_2(input15));
			Console.WriteLine("16.1: " + DaySixteen_1(input16));
			Console.WriteLine("16.2: " + DaySixteen_2(input16));
			Console.WriteLine("16.1: " + DaySixteen_1(input16));
			Console.WriteLine("16.2: " + DaySixteen_2(input16));
			Console.WriteLine("17.1: " + DaySeventeen_1(input17));
			Console.WriteLine("17.2: " + DaySeventeen_2(input17));
		}

		private long DayOne_1(string input)
		{
			int floor = 0;

			// for every character in the input
			// add to floor if that character is a (
			// subtract if that character is a )
			foreach(char c in input) {
				if(c == '(') {
					floor++;
				} else {
					floor--;
				}
			}

			return floor;
		}

		private long DayOne_2(string input)
		{
			int instruction = 1;
			int floor = 0;

			foreach (char c in input)
			{
				floor += c == '(' ? 1 : -1;

				if (floor < 0) {
					break;
				}

				instruction++;
			}

			return instruction;
		}

		private int DayTwo_1(List<Size> sizes) 
		{
			int wrappingPaper = 0;

			foreach(Size s in sizes) {
				wrappingPaper += s.SurfaceArea();
			}

			return wrappingPaper;
		}

		private int DayTwo_2(List<Size> sizes)
		{
			int ribbon = 0;

			foreach (Size s in sizes)
			{
				ribbon += s.RibbonLength();
			}

			return ribbon;
		}

		private int DayThree_1(string input) 
		{
			int xPos = 0;
			int yPos = 0;
			Dictionary<int, List<int>> houses = new Dictionary<int, List<int>>();
			List<char> instructions = input.ToList<char>();

			foreach(char c in instructions)
			{
				switch(c) {
					case '<': xPos--;
						break;
					case '^': yPos++;
						break;
					case 'v': yPos--;
						break;
					case '>': xPos++;
						break;
				}

				if(!houses.ContainsKey(xPos)) {
					houses[xPos] = new List<int>();
				}

				if (!houses[xPos].Contains(yPos)) {
					houses[xPos].Add(yPos);
				}
			}

			int houseCounter = 0;
			foreach(KeyValuePair<int, List<int>> coords in houses) {
				houseCounter += coords.Value.Count;
			}

			return houseCounter;
		}

		private int DayThree_2(string input)
		{
			int xPos = 0;
			int yPos = 0;
			int xPos2 = 0;
			int yPos2 = 0;

			bool santaTurn = true;

			Dictionary<int, List<int>> houses = new Dictionary<int, List<int>>();
			List<char> instructions = input.ToList<char>();

			foreach (char c in instructions)
			{
				switch (c)
				{
					case '<': 
						if(santaTurn) 
						{
							xPos--;
						}
						else
						{
							xPos2--;
						}
						break;
					case '^':
						if (santaTurn)
						{
							yPos++;
						}
						else
						{
							yPos2++;
						}
						break;
					case 'v':
						if (santaTurn)
						{
							yPos--;
						}
						else
						{
							yPos2--;
						}
						break;
					case '>':
						if (santaTurn)
						{
							xPos++;
						}
						else
						{
							xPos2++;
						}
						break;
				}

				if(santaTurn)
				{
					if (!houses.ContainsKey(xPos))
					{
						houses[xPos] = new List<int>();
					}

					if (!houses[xPos].Contains(yPos))
					{
						houses[xPos].Add(yPos);
					}
				} 
				else
				{
					if (!houses.ContainsKey(xPos2))
					{
						houses[xPos2] = new List<int>();
					}

					if (!houses[xPos2].Contains(yPos2))
					{
						houses[xPos2].Add(yPos2);
					}
				}

				santaTurn = !santaTurn;
			}

			int houseCounter = 0;
			foreach (KeyValuePair<int, List<int>> coords in houses)
			{
				houseCounter += coords.Value.Count;
			}

			return houseCounter;
		}

		private int DayFour_1(string input)
		{
			int hashNumber = 0;
			MD5 md5 = MD5.Create();
			while (true)
			{
				byte[] buffer = Encoding.ASCII.GetBytes(input + hashNumber);
				var hash = md5.ComputeHash(buffer);
				string hashString = BitConverter.ToString(hash);
				if (hashString[0] == '0' && hashString[1] == '0' && hashString[3] == '0' && hashString[4] == '0' && hashString[6] == '0')
				{
					return hashNumber;
				}
				hashNumber++;
			}
		}

		private int DayFour_2(string input) 
		{
			int hashNumber = 0;
			MD5 md5 = MD5.Create();
			while (true)
			{
				byte[] buffer = Encoding.ASCII.GetBytes(input + hashNumber);
				var hash = md5.ComputeHash(buffer);
				string hashString = BitConverter.ToString(hash);
				if (hashString[0] == '0' && hashString[1] == '0' && hashString[3] == '0' && hashString[4] == '0' && hashString[6] == '0' && hashString[7] == '0')
				{
					return hashNumber;
				}
				hashNumber++;
			}
		}

		private int DayFive_1(List<string> input) 
		{
			int niceWords = 0;
			bool isNiceWord = false; 
			foreach (string word in input)
			{
				isNiceWord = false;
				if (word.Contains("ab") || word.Contains("cd") || word.Contains("pq") || word.Contains("xy")) {
					continue;
				}
				for (int i = 1; i < word.Length; i++)
				{
					if (word[i] == word[i - 1])
					{
						isNiceWord = true;
						break;
					}
				}
				int vowels = 0;
				if (isNiceWord) 
				{
					for (int i = 0; i < word.Length; i++)
					{
						if ("aeiou".Contains(word[i]))
						{
							vowels++;
							if(vowels >= 3) {
								niceWords++;
								break;
							}
						}
					}
				}
			}
			return niceWords;
		}

		private int DayFive_2(List<string> input)
		{
			int niceWords = 0;
			bool isNiceWord = false;
			foreach (string word in input)
			{
				isNiceWord = false;
				for (int i = 0; i < word.Length - 2; i++)
				{
					if (word[i] == word[i + 2])
					{
						isNiceWord = true;
						break;
					}
				}

				if (isNiceWord)
				{
					for (int i = 0; i < word.Length - 2; i++)
					{
						string pair = word[i].ToString() + word[i + 1].ToString();
						if (word.Substring(i + 2).Contains(pair))
						{
							niceWords++;
							break;
						}
					}
				}
			}
			return niceWords;
		}

		private int DaySix_1(List<string> input) 
		{
			int lightsOn = 0;
			List<List<bool>> lights = new List<List<bool>>();

			for (int i = 0; i < 1000; i++) {
				List<bool> temp = new List<bool>();
				for (int j = 0; j < 1000; j++)
				{
					temp.Add(false);
				}
				lights.Add(temp);
			}

			List<LightInstruction> instructions = ParseLightInstructions(input);

			foreach(LightInstruction instruction in instructions)
			{
				for (int y = instruction.YCoordStart; y <= instruction.YCoordEnd; y++)
				{
					for (int x = instruction.XCoordStart; x <= instruction.XCoordEnd; x++)
					{
						if(instruction.Type == 2) {
							lights[y][x] = !lights[y][x];
						} else {
							lights[y][x] = instruction.Type == 0 ? false : true;
						}
					}
				}
			}

			for (int i = 0; i < 1000; i++)
			{
				for (int j = 0; j < 1000; j++)
				{
					if(lights[i][j]) {
						lightsOn++;
					}
				}
			}

			return lightsOn;
		}

		private int DaySix_2(List<string> input)
		{
			int lightLevel = 0;
			List<List<int>> lights = new List<List<int>>();

			for (int i = 0; i < 1000; i++)
			{
				List<int> temp = new List<int>();
				for (int j = 0; j < 1000; j++)
				{
					temp.Add(0);
				}
				lights.Add(temp);
			}

			List<LightInstruction> instructions = ParseLightInstructions(input);

			foreach (LightInstruction instruction in instructions)
			{
				for (int y = instruction.YCoordStart; y <= instruction.YCoordEnd; y++)
				{
					for (int x = instruction.XCoordStart; x <= instruction.XCoordEnd; x++)
					{
						if (instruction.Type == 2)
						{
							lights[y][x] += 2;
						}
						else
						{
							lights[y][x] += instruction.Type == 0 ? -1 : 1;
						}
						if(lights[y][x] < 0) {
							lights[y][x] = 0;
						}
					}
				}
			}

			for (int i = 0; i < 1000; i++)
			{
				for (int j = 0; j < 1000; j++)
				{
					lightLevel += lights[i][j];
				}
			}

			return lightLevel;
		}

		private int DayEight_1(List<string> input)
		{
			int codeLength = 0;
			int letters = 0;

			foreach (string word in input)
			{
				codeLength += word.Length;
				var tempWord = word.Replace(@"--", @"\\");
				tempWord = tempWord.Replace(@"\""", @"\");
				Console.WriteLine(word + " - " + tempWord);
				letters += tempWord.Length;
			}

			return codeLength - letters;
		}

		private int DayNine_1(List<string> input)
		{
			int distance = 0;

			Dictionary<string, CityDistance> distanceList = ParseDistances(input);

			distance = GetShortestDistance(distanceList);

			return distance;
		}

		private int DayNine_2(List<string> input)
		{
			int distance = 0;

			Dictionary<string, CityDistance> distanceList = ParseDistances(input);

			distance = GetShortestDistance(distanceList, true);

			return distance;
		}

		private int DayTen_1(string input)
		{
			string result = input;

			for(int i = 0; i < 40; i++)
			{
				result = LookAndSay(result);
			}
			DAYTEN1RESULT = result;
			return result.Length;
		}

		private int DayTen_2(string input)
		{
			string result = DAYTEN1RESULT;

			for (int i = 0; i < 10; i++)
			{
				result = LookAndSay(result);
			}
			return result.Length;
		}

		private string DayEleven_1(string input)
		{
			List<int> integerForm = new List<int>();

			foreach (char c in input)
			{
				integerForm.Add(c - 97);
			}

			integerForm = PasswordIncrement(integerForm);

			while (!ValidatePassword(integerForm))
			{
				integerForm = PasswordIncrement(integerForm);
			}

			string result = "";
			foreach (int i in integerForm)
			{
				result += (char)(i + 97);
			}
			return result;
		}

		private string DayEleven_2(string input)
		{
			var newInput = DayEleven_1(input);
			return DayEleven_1(newInput);
		}

		private int DayTwelve_1(List<string> input)
		{
			int happiness = 0;

			Dictionary<string, HappinessIndex> instructions = ParseSeatingInstructions(input);

			happiness = GetHappiness(instructions);

			return happiness;
		}

		private int DayTwelve_2(List<string> input)
		{
			int happiness = 0;

			Dictionary<string, HappinessIndex> instructions = ParseSeatingInstructions(input);

			happiness = GetHappiness(instructions, true);

			return happiness;
		}

		private int DayFourteen_1(List<string> input)
		{
			int result = 0;

			List<Reindeer> reindeer = ParseReindeer(input);

			result = GetFastestReindeer(reindeer, 2503);

			return result;
		}

		private int DayFourteen_2(List<string> input)
		{
			int result = 0;

			List<Reindeer> reindeer = ParseReindeer(input);

			result = GetFastestReindeer2(reindeer, 2503);

			return result;
		}

		private int DayFifteen_1(List<string> input)
		{
			int result = 0;

			List<Ingredient> cookies = ParseCookies(input);

			result = GetBestCookie(cookies, 100, new Cookie()).GetCookieScore();

			return result;
		}

		private int DayFifteen_2(List<string> input)
		{
			int result = 0;

			List<Ingredient> cookies = ParseCookies(input);

			result = GetBestCookie(cookies, 100, new Cookie()).GetCookieScore();

			return result;
		}

		private int DaySixteen_1(List<string> input)
		{
			int result = 0;

			List<Sue> sues = ParseSues(input);
			result = GetCorrectSueId(sues);

			return result;
		}

		private int DaySixteen_2(List<string> input)
		{
			int result = 0;

			List<Sue> sues = ParseSues(input);
			result = GetCorrectSueId(sues, true);

			return result;
		}

		private int DaySeventeen_1(List<int> input)
		{
			int result = 0;

			result = GetContainerCombinations(input);

			return result;
		}

		private int DaySeventeen_2(List<int> input)
		{
			int result = 0;
			


			return result;
		}

		/*
		 *	Passwords must include one increasing straight of at least three letters, like abc, bcd, cde, and so on, up to xyz. They cannot skip letters; abd doesn't count.
		 *	Passwords may not contain the letters i, o, or l, as these letters can be mistaken for other characters and are therefore confusing.
		 *	Passwords must contain at least two different, non-overlapping pairs of letters, like aa, bb, or zz.
		 */
		private bool ValidatePassword(List<int> password)
		{
			bool valid = true;

			valid = ValidatorThreeStraight(password);
			valid = valid && ValidatorNoIOL(password);
			valid = valid && ValidatorTwoPairs(password);

			return valid;
		}

		private bool ValidatorThreeStraight(List<int> password)
		{
			bool valid = false;
			int straight = 1;
			for (int i = 0; i < password.Count - 1; i++)
			{
				if (password[i] == password[i + 1] - 1)
				{
					straight++;
					if (i > password.Count - 1)
					{
						break;
					}
				}
				else
				{
					straight = 1;
				}
				if (straight >= 3)
				{
					valid = true;
				}
			}
			return valid;
		}

		/* 
		 *	i = 8
		 *	l = 11
		 *	o = 14
		 */
		private bool ValidatorNoIOL(List<int> password)
		{
			bool pass = !(password.Contains(8) || password.Contains(11) || password.Contains(14));
			return pass;
		}

		private bool ValidatorTwoPairs(List<int> password)
		{
			List<int> invalid = new List<int>();
			int pairs = 0;
			for (int i = 0; i < password.Count - 1; i++)
			{
				if (password[i] == password[i + 1] && !invalid.Contains(password[i]))
				{
					pairs++;
					invalid.Add(password[i]);
				}
			}

			return pairs >= 2;
		}

		private List<int> PasswordIncrement(List<int> password)
		{
			int index = password.Count;
			int retVal = 0;
			while (retVal == 0 && index >= 0)
			{
				index--;
				retVal = AddOrOver(password[index]);
				password[index] = retVal;
			}

			return password;
		}

		private int AddOrOver(int number)
		{
			number++;
			if (number > 25)
			{
				return 0;
			}
			else
			{
				return number;
			}
		}

		private List<LightInstruction> ParseLightInstructions(List<string> input)
		{
			List<LightInstruction> result = new List<LightInstruction>();

			foreach(string instruction in input)
			{
				byte adjuster = 0;
				LightInstruction temp = new LightInstruction();
				string[] split = instruction.Split(' ');
				if(split[0] == "toggle")
				{
					temp.Type = 2;
					adjuster = 1;
				} else {
					if(split[1] == "off")  {
						temp.Type = 0;
					} else {
						temp.Type = 1;
					}
				}

				string[] startCoords = split[2 - adjuster].Split(',');
				temp.XCoordStart = short.Parse(startCoords[0]);
				temp.YCoordStart = short.Parse(startCoords[1]);

				string[] endCoords = split[4 - adjuster].Split(',');
				temp.XCoordEnd = short.Parse(endCoords[0]);
				temp.YCoordEnd = short.Parse(endCoords[1]);

				result.Add(temp);
			}

			return result;
		}

		private Dictionary<string, CityDistance> ParseDistances(List<string> input)
		{
			Dictionary<string, CityDistance> result = new Dictionary<string, CityDistance>();
			List<string> cities = new List<string>();

			foreach (string instruction in input)
			{
				string[] split = instruction.Split(' ');

				if (!cities.Contains(split[0]))
				{
					cities.Add(split[0]);
					result[split[0]] = new CityDistance();
				}
				if (!cities.Contains(split[2]))
				{
					cities.Add(split[2]);
					result[split[2]] = new CityDistance();
				}
				
				result[split[0]].DistanceTo[split[2]] = int.Parse(split[4]);
				result[split[0]].DistanceTo[split[2]] = int.Parse(split[4]);
			}

			foreach (string city in cities)
			{
				foreach (string city2 in cities)
				{
					if(city == city2)
					{
						continue;
					}
					if (!result[city].DistanceTo.ContainsKey(city2))
					{
						result[city].DistanceTo[city2] = result[city2].DistanceTo[city];
					}
				}
			}
			return result;
		}

		private int GetShortestDistance(Dictionary<string, CityDistance> input, bool longest = false)
		{
			var distances = new List<int>();
			foreach(string city in input.Keys) 
			{
				var citiesToGo = input.Keys.ToList();
				citiesToGo.Remove(city);
				distances.Add(GetShortestDistance(input, citiesToGo, city, 0, longest));
			}
			distances.Sort();
			return longest ? distances.LastOrDefault() : distances.FirstOrDefault();
		}

		private int GetShortestDistance(Dictionary<string, CityDistance> input, List<string> citiesToGo, string currentCity, int distance, bool longest)
		{
			var distances = new List<int>();
			if (citiesToGo.Count == 0) {
				return distance;
			}
			foreach(string city in citiesToGo)
			{
				var dist = distance + input[currentCity].DistanceTo[city];
				var citiesToGoMinusThisCity = citiesToGo.ToList<string>();
				citiesToGoMinusThisCity.Remove(city);
				distances.Add(GetShortestDistance(input, citiesToGoMinusThisCity, city, dist, longest));
			}

			distances.Sort();
			return longest ? distances.LastOrDefault() : distances.FirstOrDefault();
		}

		private string LookAndSay(string input)
		{
			StringBuilder sb = new StringBuilder();
			int count = 0;
			char oldChar = 'z';
			foreach(char c in input)
			{
				if(oldChar != 'z' && c == oldChar) {
					count++;
				} else {
					if(oldChar != 'z')
					{
						sb.Append(count.ToString()[0], 1);
						sb.Append(oldChar, 1);
					}
					oldChar = c;
					count = 1;
				}
			}

			sb.Append(count.ToString()[0], 1);
			sb.Append(oldChar, 1);

			return sb.ToString();
		}

		private Dictionary<string, HappinessIndex> ParseSeatingInstructions(List<string> input)
		{
			Dictionary<string, HappinessIndex> result = new Dictionary<string, HappinessIndex>();
			List<string> guests = new List<string>();

			foreach (string instruction in input)
			{
				string[] split = instruction.Split(' ');

				if (!guests.Contains(split[0]))
				{
					guests.Add(split[0]);
					result[split[0]] = new HappinessIndex();
				}
				if (!guests.Contains(split[10]))
				{
					guests.Add(split[10]);
					result[split[10]] = new HappinessIndex();
				}

				if(split[2] == "gain")
				{
					result[split[0]].HappinessDict[split[10]] = int.Parse(split[3]);
					result[split[0]].HappinessDict[split[10]] = int.Parse(split[3]);
				} else
				{
					result[split[0]].HappinessDict[split[10]] = -1 * int.Parse(split[3]);
					result[split[0]].HappinessDict[split[10]] = -1 * int.Parse(split[3]);
				}
			}

			foreach (string guest in guests)
			{
				foreach (string guest2 in guests)
				{
					if (guest == guest2)
					{
						continue;
					}
					if (!result[guest].HappinessDict.ContainsKey(guest2))
					{
						result[guest].HappinessDict[guest2] = result[guest2].HappinessDict[guest];
					}
				}
			}
			return result;
		}

		private int GetHappiness(Dictionary<string, HappinessIndex> input, bool addYourself = false)
		{
			var happinessTotal = new List<int>();

			if (addYourself)
			{
				var hi = new HappinessIndex();
				hi.Name = "me";
				foreach (string guest in input.Keys)
				{
					hi.HappinessDict[guest] = 0;
					input[guest].HappinessDict["me"] = 0;
				}
				input["me"] = hi;
			}

			foreach (string guest in input.Keys)
			{
				var guestsToGo = input.Keys.ToList();
				guestsToGo.Remove(guest);
				happinessTotal.Add(GetHappiness(input, guestsToGo, guest, 0, addYourself, guest));
			}
			happinessTotal.Sort();
			return happinessTotal.LastOrDefault();
		}

		private int GetHappiness(Dictionary<string, HappinessIndex> input, List<string> guestsToGo, string currentGuest, int happiness, bool addYourself, string firstGuest)
		{
			var happinessTotal = new List<int>();
			if (guestsToGo.Count == 0)
			{
				return happiness + input[currentGuest].HappinessDict[firstGuest] + input[firstGuest].HappinessDict[currentGuest];
			}
			foreach (string guest in guestsToGo)
			{
				var happ = happiness + input[currentGuest].HappinessDict[guest];
				happ += input[guest].HappinessDict[currentGuest];
				var guestsToGoMinusThisGuest = guestsToGo.ToList<string>();
				guestsToGoMinusThisGuest.Remove(guest);
				happinessTotal.Add(GetHappiness(input, guestsToGoMinusThisGuest, guest, happ, addYourself, firstGuest));
			}

			happinessTotal.Sort();
			return happinessTotal.LastOrDefault();
		}

		private List<Reindeer> ParseReindeer(List<string> input)
		{
			List<Reindeer> allReindeer = new List<Reindeer>();

			foreach (string instruction in input)
			{
				string[] split = instruction.Split(' ');

				var reindeer = new Reindeer();
				reindeer.Name = split[0];
				reindeer.Speed = int.Parse(split[3]);
				reindeer.Duration = int.Parse(split[6]);
				reindeer.Rest = int.Parse(split[13]);
				allReindeer.Add(reindeer);
			}

			return allReindeer;
		}

		private int GetFastestReindeer(List<Reindeer> allReindeer, int seconds) 
		{
			List<int> reindeerDistances = new List<int>();
			foreach(Reindeer r in allReindeer)
			{
				int stamina = r.Duration;
				int restTime = 0;
				int totalDistance = 0;
				for(int i = 0; i < seconds; i++) {
					if(restTime == 0) {
						stamina--;
						totalDistance += r.Speed;
						if(stamina == 0)
						{
							stamina = r.Duration;
							restTime = r.Rest;
						}
					} else {
						restTime--;
					}
				}
				reindeerDistances.Add(totalDistance);
			}

			reindeerDistances.Sort();
			return reindeerDistances.LastOrDefault();
		}

		private int GetFastestReindeer2(List<Reindeer> allReindeer, int seconds)
		{
			Dictionary<string, int> scores = new Dictionary<string, int>();
			Dictionary<string, int> distances = new Dictionary<string, int>();
			foreach (Reindeer r in allReindeer)
			{
				scores[r.Name] = 0;
				distances[r.Name] = 0;
				r.Stamina = r.Duration;
				r.RestTime = 0;
				r.Score = 0;
				r.Distance = 0;
			}
			for (int i = 0; i < seconds; i++)
			{
				int highestDistance = 0;
				foreach (Reindeer r in allReindeer)
				{
					if (r.RestTime == 0)
					{
						r.Stamina--;
						r.Distance += r.Speed;
						if (r.Stamina == 0)
						{
							r.Stamina = r.Duration;
							r.RestTime = r.Rest;
						}
					}
					else
					{
						r.RestTime--;
					}
					if (r.Distance > highestDistance)
					{
						highestDistance = r.Distance;
					}
				}
				foreach(Reindeer r in allReindeer)
				{
					if (r.Distance == highestDistance)
					{
						scores[r.Name]++;
					}
				}
			}

			List<int> scoreList = scores.Values.ToList<int>();
			scoreList.Sort();
			return scoreList.LastOrDefault();
		}

		private List<Ingredient> ParseCookies(List<string> input)
		{
			List<Ingredient> cookies = new List<Ingredient>();

			foreach (string instruction in input)
			{
				var c = instruction.Trim(new Char[] { ':', ',' });
				string[] split = c.Split(' ');

				var cookie = new Ingredient();
				cookie.Name = split[0].Trim(new Char[] { ':', ',' });
				cookie.Capacity = int.Parse(split[2].Trim(new Char[] { ':', ',' }));
				cookie.Durability = int.Parse(split[4].Trim(new Char[] { ':', ',' }));
				cookie.Flavor= int.Parse(split[6].Trim(new Char[] { ':', ',' }));
				cookie.Texture = int.Parse(split[8].Trim(new Char[] { ':', ',' }));
				cookie.Calories = int.Parse(split[10].Trim(new Char[] { ':', ',' }));
				cookies.Add(cookie);
			}

			return cookies;
		}

		private Cookie GetBestCookie(List<Ingredient> ingredients, int amount, Cookie currentCookie)
		{
			Cookie result = currentCookie;

			if(ingredients.Count == 1) {
				var temp = MakeCookie(ingredients[0], amount);
				temp.AddCookie(currentCookie);
				return temp;
			} else
			{
				foreach (Ingredient i in ingredients)
				{
					var ingredientsWithoutThisOne = ingredients.ToList<Ingredient>();
					ingredientsWithoutThisOne.Remove(i);
					for (int j = 0; j < amount; j++)
					{
						var tempCookie = MakeCookie(i, j);
						tempCookie.AddCookie(currentCookie);
						var temp = GetBestCookie(ingredientsWithoutThisOne, amount - j, tempCookie);
						if (temp.GetCookieScore() > result.GetCookieScore())
						{
							result = temp.Clone();
						}
					}
				}
			}
			return result;
		}

		private Cookie MakeCookie(Ingredient ingredient, int amount)
		{
			var cookie = new Cookie();
			cookie.Capacity = amount * ingredient.Capacity;
			cookie.Durability = amount * ingredient.Durability;
			cookie.Flavor = amount * ingredient.Flavor;
			cookie.Texture = amount * ingredient.Texture;

			return cookie;
		}

		private List<Sue> ParseSues(List<string> input)
		{
			List<Sue> sues = new List<Sue>();

			foreach (string instruction in input)
			{
				string[] split = instruction.Split(' ');

				var sue = new Sue();
				sue.id = int.Parse(split[0]);
				for(int i = 1; i < split.Length; i += 2)
				{
					switch(split[i])
					{
						case "children":
							sue.children = int.Parse(split[i + 1]);
							break;
						case "cats":
							sue.cats = int.Parse(split[i + 1]);
							break;
						case "samoyeds":
							sue.samoyeds = int.Parse(split[i + 1]);
							break;
						case "pomeranians":
							sue.pomeranians = int.Parse(split[i + 1]);
							break;
						case "akitas":
							sue.akitas = int.Parse(split[i + 1]);
							break;
						case "vizslas":
							sue.vizslas = int.Parse(split[i + 1]);
							break;
						case "goldfish":
							sue.goldfish = int.Parse(split[i + 1]);
							break;
						case "trees":
							sue.trees = int.Parse(split[i + 1]);
							break;
						case "cars":
							sue.cars = int.Parse(split[i + 1]);
							break;
						case "perfumes":
							sue.perfumes = int.Parse(split[i + 1]);
							break;
					}
				}
				sues.Add(sue);
			}

			return sues;
		}

		public int GetCorrectSueId(List<Sue> sues, bool secondMethod = false)
		{
			int id = 0;
			int highScore = 0;

			foreach (Sue s in sues)
			{
				if(s.GetSueScore(secondMethod) > highScore)
				{
					highScore = s.GetSueScore(secondMethod);
					id = s.id;
				}
			}

			return id;
		}

		public int GetContainerCombinations(List<int> input, int goal)
		{
			int combinations = 0;
			var containers = input.ToList<int>();

			containers.Sort();

			for(int i = 0; i < containers.Count; i++)
			{
				bool tooMuch = false;
				int filled = 0;
				int amount = 1;

				while(!tooMuch)
				{
					filled = containers[i] * amount;
					if(filled > goal)
					{
						tooMuch = true;
						continue;
					}
					if (filled == goal)
					{
						combinations++;
					}
				}
			}

			return combinations;
		}
	}

	public class Size
	{
		public int length;
		public int width;
		public int height;

		public Size(int l, int w, int h) {
			length = l;
			width = w;
			height = h;
		}

		public int SurfaceArea() {
			int area = 0;

			area += 2 * length * width;
			area += 2 * length * height;
			area += 2 * height * width;

			area += SmallestSidesMultiplied();

			return area;
		}

		public int RibbonLength()
		{
			int ribbon = 0;

			ribbon += length * width * height;

			ribbon += SmallestSidesAdded();

			return ribbon;

		}

		public int SmallestSidesMultiplied() {
			
			if(length < width) 
			{
				if(width < height) {
					return length * width;
				} else {
					return length * height;
				}
			} 
			else
			{
				if (length > height)
				{
					return width * height;
				}
				else
				{
					return width * length;
				}

			}
		}

		public int SmallestSidesAdded()
		{

			if (length < width)
			{
				if (width < height)
				{
					return 2 * (length + width);
				}
				else
				{
					return 2 * (length + height);
				}
			}
			else
			{
				if (length > height)
				{
					return 2 * (width + height);
				}
				else
				{
					return 2 * (width + length);
				}

			}
		}
	}

	public class LightInstruction
	{
		//0 for turn off, 1 for turn on and 2 for toggle
		public byte Type;

		public short XCoordStart;
		public short XCoordEnd;
		public short YCoordStart;
		public short YCoordEnd;
	}

	public class CityDistance
	{
		public string City;
		public Dictionary<string, int> DistanceTo = new Dictionary<string, int>();
	}

	public class HappinessIndex
	{
		public string Name;
		public Dictionary<string, int> HappinessDict = new Dictionary<string, int>();
	}

	public class Reindeer
	{
		public string Name;
		public int Speed;
		public int Duration;
		public int Rest;
		public int Stamina;
		public int RestTime;
		public int Score;
		public int Distance;
	}

	public class Ingredient
	{
		public string Name;
		public int Capacity;
		public int Durability;
		public int Flavor;
		public int Texture;
		public int Calories;
	}

	public class Cookie
	{
		public int Capacity;
		public int Durability;
		public int Flavor;
		public int Texture;
		public int Calories;

		public Cookie()
		{
			Capacity = 0;
			Durability = 0;
			Flavor = 0;
			Texture = 0;
			Calories = 0;
		}

		public void AddCookie(Cookie c)
		{
			Calories += c.Calories;
			Capacity += c.Capacity;
			Durability += c.Durability;
			Flavor += c.Flavor;
			Texture += c.Texture;
		}

		public int GetCookieScore() 
		{
			if (Capacity <= 0 || Durability <= 0 || Flavor <= 0 || Texture <= 0)
				return 0;
			return Capacity * Durability * Flavor * Texture;
		}

		public Cookie Clone()
		{
			var c = new Cookie();
			c.AddCookie(this);
			return c;
		}
	}

	public class Sue
	{
		public int id;
		public int children;
		public int cats;
		public int samoyeds;
		public int pomeranians;
		public int akitas;
		public int vizslas;
		public int goldfish;
		public int trees;
		public int cars;
		public int perfumes;

		public Sue() {
			id = -1;
			children = -1;
			cats = -1;
			samoyeds = -1;
			pomeranians = -1;
			akitas = -1;
			vizslas = -1;
			goldfish = -1;
			trees = -1;
			cars = -1;
			perfumes = -1;
		}

		public int GetSueScore(bool secondMethod)
		{
			if(secondMethod) {
				return GetSueScore2();
			}

			int score = 0;

			score += children == 3 ? 1 : 0;
			score += cats == 7 ? 1 : 0;
			score += samoyeds == 2 ? 1 : 0;
			score += pomeranians == 3 ? 1 : 0;
			score += akitas == 0 ? 1 : 0;
			score += vizslas == 0 ? 1 : 0;
			score += goldfish == 5 ? 1 : 0;
			score += trees == 3 ? 1 : 0;
			score += cars == 2 ? 1 : 0;
			score += perfumes == 1 ? 1 : 0;

			foreach(PropertyInfo propertyInfo in this.GetType().GetProperties())
			{
				int p = 0;
				propertyInfo.GetValue(p, null);
				if (p == -1)
					score -= 1;
			}


			return score;
		}

		public int GetSueScore2()
		{
			int score = 0;

			score += children == 3 ? 1 : 0;
			score += cats > 7 ? 1 : 0;
			score += samoyeds == 2 ? 1 : 0;
			score += pomeranians < 3 && pomeranians >= 0 ? 1 : 0;
			score += akitas == 0 ? 1 : 0;
			score += vizslas == 0 ? 1 : 0;
			score += goldfish < 5 && goldfish >= 0 ? 1 : 0;
			score += trees > 3 ? 1 : 0;
			score += cars == 2 ? 1 : 0;
			score += perfumes == 1 ? 1 : 0;

			foreach (PropertyInfo propertyInfo in this.GetType().GetProperties())
			{
				int p = 0;
				propertyInfo.GetValue(p, null);
				if (p == -1)
					score -= 1;
			}


			return score;
		}
	}
}
